/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-appwrite";
exports.ids = ["vendor-chunks/node-appwrite"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-appwrite/index.js":
/*!*********************************************!*\
  !*** ./node_modules/node-appwrite/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Client = __webpack_require__(/*! ./lib/client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Query = __webpack_require__(/*! ./lib/query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\nconst Permission = __webpack_require__(/*! ./lib/permission.js */ \"(rsc)/./node_modules/node-appwrite/lib/permission.js\");\nconst Role = __webpack_require__(/*! ./lib/role.js */ \"(rsc)/./node_modules/node-appwrite/lib/role.js\");\nconst ID = __webpack_require__(/*! ./lib/id.js */ \"(rsc)/./node_modules/node-appwrite/lib/id.js\");\nconst InputFile = __webpack_require__(/*! ./lib/inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst AppwriteException = __webpack_require__(/*! ./lib/exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst Account = __webpack_require__(/*! ./lib/services/account.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/account.js\");\nconst Avatars = __webpack_require__(/*! ./lib/services/avatars.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/avatars.js\");\nconst Databases = __webpack_require__(/*! ./lib/services/databases.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/databases.js\");\nconst Functions = __webpack_require__(/*! ./lib/services/functions.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/functions.js\");\nconst Graphql = __webpack_require__(/*! ./lib/services/graphql.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/graphql.js\");\nconst Health = __webpack_require__(/*! ./lib/services/health.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/health.js\");\nconst Locale = __webpack_require__(/*! ./lib/services/locale.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/locale.js\");\nconst Storage = __webpack_require__(/*! ./lib/services/storage.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/storage.js\");\nconst Teams = __webpack_require__(/*! ./lib/services/teams.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/teams.js\");\nconst Users = __webpack_require__(/*! ./lib/services/users.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/users.js\");\nmodule.exports = {\n    Client,\n    Query,\n    Permission,\n    Role,\n    ID,\n    InputFile,\n    AppwriteException,\n    Account,\n    Avatars,\n    Databases,\n    Functions,\n    Graphql,\n    Health,\n    Locale,\n    Storage,\n    Teams,\n    Users\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQztBQUMzQixNQUFNRyxPQUFPSCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNSSxLQUFLSixtQkFBT0EsQ0FBQztBQUNuQixNQUFNSyxZQUFZTCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNTSxvQkFBb0JOLG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU1PLFVBQVVQLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1RLFVBQVVSLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1TLFlBQVlULG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1VLFlBQVlWLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1XLFVBQVVYLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1ZLFNBQVNaLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1hLFNBQVNiLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1jLFVBQVVkLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1lLFFBQVFmLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1nQixRQUFRaEIsbUJBQU9BLENBQUM7QUFFdEJpQixPQUFPQyxPQUFPLEdBQUc7SUFDYm5CO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2luZGV4LmpzPzg1YzMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi9saWIvY2xpZW50LmpzJyk7XG5jb25zdCBRdWVyeSA9IHJlcXVpcmUoJy4vbGliL3F1ZXJ5LmpzJyk7XG5jb25zdCBQZXJtaXNzaW9uID0gcmVxdWlyZSgnLi9saWIvcGVybWlzc2lvbi5qcycpO1xuY29uc3QgUm9sZSA9IHJlcXVpcmUoJy4vbGliL3JvbGUuanMnKTtcbmNvbnN0IElEID0gcmVxdWlyZSgnLi9saWIvaWQuanMnKTtcbmNvbnN0IElucHV0RmlsZSA9IHJlcXVpcmUoJy4vbGliL2lucHV0RmlsZS5qcycpO1xuY29uc3QgQXBwd3JpdGVFeGNlcHRpb24gPSByZXF1aXJlKCcuL2xpYi9leGNlcHRpb24uanMnKTtcbmNvbnN0IEFjY291bnQgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9hY2NvdW50LmpzJyk7XG5jb25zdCBBdmF0YXJzID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvYXZhdGFycy5qcycpO1xuY29uc3QgRGF0YWJhc2VzID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvZGF0YWJhc2VzLmpzJyk7XG5jb25zdCBGdW5jdGlvbnMgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9mdW5jdGlvbnMuanMnKTtcbmNvbnN0IEdyYXBocWwgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9ncmFwaHFsLmpzJyk7XG5jb25zdCBIZWFsdGggPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9oZWFsdGguanMnKTtcbmNvbnN0IExvY2FsZSA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL2xvY2FsZS5qcycpO1xuY29uc3QgU3RvcmFnZSA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL3N0b3JhZ2UuanMnKTtcbmNvbnN0IFRlYW1zID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvdGVhbXMuanMnKTtcbmNvbnN0IFVzZXJzID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvdXNlcnMuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQ2xpZW50LFxuICAgIFF1ZXJ5LFxuICAgIFBlcm1pc3Npb24sXG4gICAgUm9sZSxcbiAgICBJRCxcbiAgICBJbnB1dEZpbGUsXG4gICAgQXBwd3JpdGVFeGNlcHRpb24sXG4gICAgQWNjb3VudCxcbiAgICBBdmF0YXJzLFxuICAgIERhdGFiYXNlcyxcbiAgICBGdW5jdGlvbnMsXG4gICAgR3JhcGhxbCxcbiAgICBIZWFsdGgsXG4gICAgTG9jYWxlLFxuICAgIFN0b3JhZ2UsXG4gICAgVGVhbXMsXG4gICAgVXNlcnMsXG59O1xuIl0sIm5hbWVzIjpbIkNsaWVudCIsInJlcXVpcmUiLCJRdWVyeSIsIlBlcm1pc3Npb24iLCJSb2xlIiwiSUQiLCJJbnB1dEZpbGUiLCJBcHB3cml0ZUV4Y2VwdGlvbiIsIkFjY291bnQiLCJBdmF0YXJzIiwiRGF0YWJhc2VzIiwiRnVuY3Rpb25zIiwiR3JhcGhxbCIsIkhlYWx0aCIsIkxvY2FsZSIsIlN0b3JhZ2UiLCJUZWFtcyIsIlVzZXJzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/client.js":
/*!**************************************************!*\
  !*** ./node_modules/node-appwrite/lib/client.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const os = __webpack_require__(/*! os */ \"os\");\nconst URL = (__webpack_require__(/*! url */ \"url\").URL);\nconst https = __webpack_require__(/*! https */ \"https\");\nconst axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nconst FormData = __webpack_require__(/*! form-data */ \"(rsc)/./node_modules/node-appwrite/node_modules/form-data/lib/form_data.js\");\nconst AppwriteException = __webpack_require__(/*! ./exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nclass Client {\n    static{\n        this.CHUNK_SIZE = 5 * 1024 * 1024 // 5MB\n        ;\n    }\n    constructor(){\n        this.endpoint = \"https://HOSTNAME/v1\";\n        this.headers = {\n            \"accept-encoding\": \"*\",\n            \"content-type\": \"\",\n            \"user-agent\": `AppwriteNodeJSSDK/11.1.0 (${os.type()}; ${os.version()}; ${os.arch()})`,\n            \"x-sdk-name\": \"Node.js\",\n            \"x-sdk-platform\": \"server\",\n            \"x-sdk-language\": \"nodejs\",\n            \"x-sdk-version\": \"11.1.0\",\n            \"X-Appwrite-Response-Format\": \"1.4.0\"\n        };\n        this.selfSigned = false;\n    }\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param {string} project\n     *\n     * @return self\n     */ setProject(project) {\n        this.addHeader(\"X-Appwrite-Project\", project);\n        return this;\n    }\n    /**\n     * Set Key\n     *\n     * Your secret API key\n     *\n     * @param {string} key\n     *\n     * @return self\n     */ setKey(key) {\n        this.addHeader(\"X-Appwrite-Key\", key);\n        return this;\n    }\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param {string} jwt\n     *\n     * @return self\n     */ setJWT(jwt) {\n        this.addHeader(\"X-Appwrite-JWT\", jwt);\n        return this;\n    }\n    /**\n     * Set Locale\n     *\n     * @param {string} locale\n     *\n     * @return self\n     */ setLocale(locale) {\n        this.addHeader(\"X-Appwrite-Locale\", locale);\n        return this;\n    }\n    /**\n     * Set self signed.\n     *\n     * @param {bool} status\n     *\n     * @return this\n     */ setSelfSigned(status = true) {\n        this.selfSigned = status;\n        return this;\n    }\n    /**\n     * Set endpoint.\n     *\n     * @param {string} endpoint\n     *\n     * @return this\n     */ setEndpoint(endpoint) {\n        this.endpoint = endpoint;\n        return this;\n    }\n    /**\n     * @param {string} key\n     * @param {string} value\n     */ addHeader(key, value) {\n        this.headers[key.toLowerCase()] = value;\n        return this;\n    }\n    async call(method, path = \"\", headers = {}, params = {}, responseType = \"json\") {\n        headers = Object.assign({}, this.headers, headers);\n        let contentType = headers[\"content-type\"].toLowerCase();\n        let formData = null;\n        // Compute FormData for axios and appwrite.\n        if (contentType.startsWith(\"multipart/form-data\")) {\n            const form = new FormData();\n            let flatParams = Client.flatten(params);\n            for(const key in flatParams){\n                const value = flatParams[key];\n                if (value && value.type && value.type === \"file\") {\n                    form.append(key, value.file, {\n                        filename: value.filename\n                    });\n                } else {\n                    form.append(key, flatParams[key]);\n                }\n            }\n            headers = {\n                ...headers,\n                ...form.getHeaders()\n            };\n            formData = form;\n        }\n        let options = {\n            method: method.toUpperCase(),\n            url: this.endpoint + path,\n            params: method.toUpperCase() === \"GET\" ? params : {},\n            headers: headers,\n            data: method.toUpperCase() === \"GET\" || contentType.startsWith(\"multipart/form-data\") ? formData : params,\n            json: contentType.startsWith(\"application/json\"),\n            responseType: responseType\n        };\n        if (this.selfSigned) {\n            // Allow self signed requests\n            options.httpsAgent = new https.Agent({\n                rejectUnauthorized: false\n            });\n        }\n        try {\n            let response = await axios(options);\n            return response.data;\n        } catch (error) {\n            if (\"response\" in error && error.response !== undefined) {\n                if (error.response && \"data\" in error.response) {\n                    if (typeof error.response.data === \"string\") {\n                        throw new AppwriteException(error.response.data, error.response.status, \"\", error.response.data);\n                    } else {\n                        throw new AppwriteException(error.response.data.message, error.response.status, error.response.data.type, error.response.data);\n                    }\n                } else {\n                    throw new AppwriteException(error.response.statusText, error.response.status, error.response.data);\n                }\n            } else {\n                throw new AppwriteException(error.message);\n            }\n        }\n    }\n    static flatten(data, prefix = \"\") {\n        let output = {};\n        for(const key in data){\n            let value = data[key];\n            let finalKey = prefix ? prefix + \"[\" + key + \"]\" : key;\n            if (Array.isArray(value)) {\n                output = Object.assign(output, Client.flatten(value, finalKey)); // @todo: handle name collision here if needed\n            } else {\n                output[finalKey] = value;\n            }\n        }\n        return output;\n    }\n}\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/exception.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-appwrite/lib/exception.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("class AppwriteException extends Error {\n    constructor(message, code, type, response){\n        super(message);\n        this.code = code;\n        this.type = type;\n        this.response = response;\n    }\n}\nmodule.exports = AppwriteException;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9leGNlcHRpb24uanM/NjhhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBcHB3cml0ZUV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSwgdHlwZSwgcmVzcG9uc2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwd3JpdGVFeGNlcHRpb247Il0sIm5hbWVzIjpbIkFwcHdyaXRlRXhjZXB0aW9uIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJjb2RlIiwidHlwZSIsInJlc3BvbnNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsMEJBQTBCQztJQUM5QkMsWUFBWUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsUUFBUSxDQUFFO1FBQ3pDLEtBQUssQ0FBQ0g7UUFDTixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLFFBQVEsR0FBR0E7SUFDbEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdSIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2V4Y2VwdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/exception.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/id.js":
/*!**********************************************!*\
  !*** ./node_modules/node-appwrite/lib/id.js ***!
  \**********************************************/
/***/ ((module) => {

eval("class ID {\n    static{\n        this.unique = ()=>{\n            return \"unique()\";\n        };\n    }\n    static{\n        this.custom = (id)=>{\n            return id;\n        };\n    }\n}\nmodule.exports = ID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9pZC5qcz83YzZmIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElEIHtcblxuICAgIHN0YXRpYyB1bmlxdWUgPSAoKSA9PiB7XG4gICAgICAgICByZXR1cm4gJ3VuaXF1ZSgpJ1xuICAgIH1cblxuICAgIHN0YXRpYyBjdXN0b20gPSAoaWQpID0+IHtcbiAgICAgICAgIHJldHVybiBpZFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJRDtcbiJdLCJuYW1lcyI6WyJJRCIsInVuaXF1ZSIsImN1c3RvbSIsImlkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUE7O2FBRUtDLFNBQVM7WUFDWCxPQUFPO1FBQ1o7OzthQUVPQyxTQUFTLENBQUNDO1lBQ1osT0FBT0E7UUFDWjs7QUFDSjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2lkLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/id.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/inputFile.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-appwrite/lib/inputFile.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass InputFile {\n    static{\n        this.fromPath = (filePath, filename)=>{\n            const stream = fs.createReadStream(filePath);\n            const { size } = fs.statSync(filePath);\n            return new InputFile(stream, filename, size);\n        };\n    }\n    static{\n        this.fromBuffer = (buffer, filename)=>{\n            const stream = Readable.from(buffer);\n            const size = Buffer.byteLength(buffer);\n            return new InputFile(stream, filename, size);\n        };\n    }\n    static{\n        this.fromBlob = async (blob, filename)=>{\n            const arrayBuffer = await blob.arrayBuffer();\n            const buffer = Buffer.from(arrayBuffer);\n            return InputFile.fromBuffer(buffer, filename);\n        };\n    }\n    static{\n        this.fromStream = (stream, filename, size)=>{\n            return new InputFile(stream, filename, size);\n        };\n    }\n    static{\n        this.fromPlainText = (content, filename)=>{\n            const buffer = Buffer.from(content, \"utf-8\");\n            const stream = Readable.from(buffer);\n            const size = Buffer.byteLength(buffer);\n            return new InputFile(stream, filename, size);\n        };\n    }\n    constructor(stream, filename, size){\n        this.stream = stream;\n        this.filename = filename;\n        this.size = size;\n    }\n}\nmodule.exports = InputFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvaW5wdXRGaWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsUUFBUSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzdCLE1BQU1DLEtBQUtELG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1FOzthQUtHQyxXQUFXLENBQUNDLFVBQVVDO1lBQzNCLE1BQU1DLFNBQVNMLEdBQUdNLGdCQUFnQixDQUFDSDtZQUNuQyxNQUFNLEVBQUVJLElBQUksRUFBRSxHQUFHUCxHQUFHUSxRQUFRLENBQUNMO1lBQzdCLE9BQU8sSUFBSUYsVUFBVUksUUFBUUQsVUFBVUc7UUFDekM7OzthQUVPRSxhQUFhLENBQUNDLFFBQVFOO1lBQzNCLE1BQU1DLFNBQVNQLFNBQVNhLElBQUksQ0FBQ0Q7WUFDN0IsTUFBTUgsT0FBT0ssT0FBT0MsVUFBVSxDQUFDSDtZQUMvQixPQUFPLElBQUlULFVBQVVJLFFBQVFELFVBQVVHO1FBQ3pDOzs7YUFFT08sV0FBVyxPQUFPQyxNQUFNWDtZQUM3QixNQUFNWSxjQUFjLE1BQU1ELEtBQUtDLFdBQVc7WUFDMUMsTUFBTU4sU0FBU0UsT0FBT0QsSUFBSSxDQUFDSztZQUMzQixPQUFPZixVQUFVUSxVQUFVLENBQUNDLFFBQVFOO1FBQ3RDOzs7YUFFT2EsYUFBYSxDQUFDWixRQUFRRCxVQUFVRztZQUNyQyxPQUFPLElBQUlOLFVBQVVJLFFBQVFELFVBQVVHO1FBQ3pDOzs7YUFFT1csZ0JBQWdCLENBQUNDLFNBQVNmO1lBQy9CLE1BQU1NLFNBQVNFLE9BQU9ELElBQUksQ0FBQ1EsU0FBUztZQUNwQyxNQUFNZCxTQUFTUCxTQUFTYSxJQUFJLENBQUNEO1lBQzdCLE1BQU1ILE9BQU9LLE9BQU9DLFVBQVUsQ0FBQ0g7WUFDL0IsT0FBTyxJQUFJVCxVQUFVSSxRQUFRRCxVQUFVRztRQUN6Qzs7SUFFQWEsWUFBWWYsTUFBTSxFQUFFRCxRQUFRLEVBQUVHLElBQUksQ0FBRTtRQUNsQyxJQUFJLENBQUNGLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDRyxJQUFJLEdBQUdBO0lBQ2Q7QUFDRjtBQUVBYyxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2tuZXN0Ly4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2lucHV0RmlsZS5qcz80YzE1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUmVhZGFibGUgfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jbGFzcyBJbnB1dEZpbGUge1xuICBzdHJlYW07IC8vIENvbnRlbnQgb2YgZmlsZSwgcmVhZGFibGUgc3RyZWFtXG4gIHNpemU7IC8vIFRvdGFsIGZpbmFsIHNpemUgb2YgdGhlIGZpbGUgY29udGVudFxuICBmaWxlbmFtZTsgLy8gRmlsZSBuYW1lXG5cbiAgc3RhdGljIGZyb21QYXRoID0gKGZpbGVQYXRoLCBmaWxlbmFtZSkgPT4ge1xuICAgIGNvbnN0IHN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpO1xuICAgIGNvbnN0IHsgc2l6ZSB9ID0gZnMuc3RhdFN5bmMoZmlsZVBhdGgpO1xuICAgIHJldHVybiBuZXcgSW5wdXRGaWxlKHN0cmVhbSwgZmlsZW5hbWUsIHNpemUpO1xuICB9O1xuXG4gIHN0YXRpYyBmcm9tQnVmZmVyID0gKGJ1ZmZlciwgZmlsZW5hbWUpID0+IHtcbiAgICBjb25zdCBzdHJlYW0gPSBSZWFkYWJsZS5mcm9tKGJ1ZmZlcik7XG4gICAgY29uc3Qgc2l6ZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGJ1ZmZlcik7XG4gICAgcmV0dXJuIG5ldyBJbnB1dEZpbGUoc3RyZWFtLCBmaWxlbmFtZSwgc2l6ZSk7XG4gIH07XG5cbiAgc3RhdGljIGZyb21CbG9iID0gYXN5bmMgKGJsb2IsIGZpbGVuYW1lKSA9PiB7XG4gICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCBibG9iLmFycmF5QnVmZmVyKCk7XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oYXJyYXlCdWZmZXIpO1xuICAgIHJldHVybiBJbnB1dEZpbGUuZnJvbUJ1ZmZlcihidWZmZXIsIGZpbGVuYW1lKTtcbiAgfTtcblxuICBzdGF0aWMgZnJvbVN0cmVhbSA9IChzdHJlYW0sIGZpbGVuYW1lLCBzaXplKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBJbnB1dEZpbGUoc3RyZWFtLCBmaWxlbmFtZSwgc2l6ZSk7XG4gIH07XG5cbiAgc3RhdGljIGZyb21QbGFpblRleHQgPSAoY29udGVudCwgZmlsZW5hbWUpID0+IHtcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShjb250ZW50LCBcInV0Zi04XCIpO1xuICAgIGNvbnN0IHN0cmVhbSA9IFJlYWRhYmxlLmZyb20oYnVmZmVyKTtcbiAgICBjb25zdCBzaXplID0gQnVmZmVyLmJ5dGVMZW5ndGgoYnVmZmVyKTtcbiAgICByZXR1cm4gbmV3IElucHV0RmlsZShzdHJlYW0sIGZpbGVuYW1lLCBzaXplKTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihzdHJlYW0sIGZpbGVuYW1lLCBzaXplKSB7XG4gICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbnB1dEZpbGU7XG4iXSwibmFtZXMiOlsiUmVhZGFibGUiLCJyZXF1aXJlIiwiZnMiLCJJbnB1dEZpbGUiLCJmcm9tUGF0aCIsImZpbGVQYXRoIiwiZmlsZW5hbWUiLCJzdHJlYW0iLCJjcmVhdGVSZWFkU3RyZWFtIiwic2l6ZSIsInN0YXRTeW5jIiwiZnJvbUJ1ZmZlciIsImJ1ZmZlciIsImZyb20iLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiZnJvbUJsb2IiLCJibG9iIiwiYXJyYXlCdWZmZXIiLCJmcm9tU3RyZWFtIiwiZnJvbVBsYWluVGV4dCIsImNvbnRlbnQiLCJjb25zdHJ1Y3RvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/inputFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/permission.js":
/*!******************************************************!*\
  !*** ./node_modules/node-appwrite/lib/permission.js ***!
  \******************************************************/
/***/ ((module) => {

eval("class Permission {\n    static{\n        this.read = (role)=>{\n            return `read(\"${role}\")`;\n        };\n    }\n    static{\n        this.write = (role)=>{\n            return `write(\"${role}\")`;\n        };\n    }\n    static{\n        this.create = (role)=>{\n            return `create(\"${role}\")`;\n        };\n    }\n    static{\n        this.update = (role)=>{\n            return `update(\"${role}\")`;\n        };\n    }\n    static{\n        this.delete = (role)=>{\n            return `delete(\"${role}\")`;\n        };\n    }\n}\nmodule.exports = Permission;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9wZXJtaXNzaW9uLmpzPzRmZmEiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUGVybWlzc2lvbiB7XG5cbiAgICBzdGF0aWMgcmVhZCA9IChyb2xlKSA9PiB7XG4gICAgICAgICByZXR1cm4gYHJlYWQoXCIke3JvbGV9XCIpYFxuICAgIH1cblxuICAgIHN0YXRpYyB3cml0ZSA9IChyb2xlKSA9PiB7XG4gICAgICAgICByZXR1cm4gYHdyaXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgY3JlYXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG5cbiAgICBzdGF0aWMgdXBkYXRlID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgdXBkYXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVsZXRlID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgZGVsZXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGVybWlzc2lvbjtcbiJdLCJuYW1lcyI6WyJQZXJtaXNzaW9uIiwicmVhZCIsInJvbGUiLCJ3cml0ZSIsImNyZWF0ZSIsInVwZGF0ZSIsImRlbGV0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BOzthQUVLQyxPQUFPLENBQUNDO1lBQ1YsT0FBTyxDQUFDLE1BQU0sRUFBRUEsS0FBSyxFQUFFLENBQUM7UUFDN0I7OzthQUVPQyxRQUFRLENBQUNEO1lBQ1gsT0FBTyxDQUFDLE9BQU8sRUFBRUEsS0FBSyxFQUFFLENBQUM7UUFDOUI7OzthQUVPRSxTQUFTLENBQUNGO1lBQ1osT0FBTyxDQUFDLFFBQVEsRUFBRUEsS0FBSyxFQUFFLENBQUM7UUFDL0I7OzthQUVPRyxTQUFTLENBQUNIO1lBQ1osT0FBTyxDQUFDLFFBQVEsRUFBRUEsS0FBSyxFQUFFLENBQUM7UUFDL0I7OzthQUVPSSxTQUFTLENBQUNKO1lBQ1osT0FBTyxDQUFDLFFBQVEsRUFBRUEsS0FBSyxFQUFFLENBQUM7UUFDL0I7O0FBQ0o7QUFFQUssT0FBT0MsT0FBTyxHQUFHUiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9wZXJtaXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/permission.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/query.js":
/*!*************************************************!*\
  !*** ./node_modules/node-appwrite/lib/query.js ***!
  \*************************************************/
/***/ ((module) => {

eval("class Query {\n    static{\n        this.equal = (attribute, value)=>Query.addQuery(attribute, \"equal\", value);\n    }\n    static{\n        this.notEqual = (attribute, value)=>Query.addQuery(attribute, \"notEqual\", value);\n    }\n    static{\n        this.lessThan = (attribute, value)=>Query.addQuery(attribute, \"lessThan\", value);\n    }\n    static{\n        this.lessThanEqual = (attribute, value)=>Query.addQuery(attribute, \"lessThanEqual\", value);\n    }\n    static{\n        this.greaterThan = (attribute, value)=>Query.addQuery(attribute, \"greaterThan\", value);\n    }\n    static{\n        this.greaterThanEqual = (attribute, value)=>Query.addQuery(attribute, \"greaterThanEqual\", value);\n    }\n    static{\n        this.isNull = (attribute)=>`isNull(\"${attribute}\")`;\n    }\n    static{\n        this.isNotNull = (attribute)=>`isNotNull(\"${attribute}\")`;\n    }\n    static{\n        this.between = (attribute, start, end)=>`between(\"${attribute}\", ${Query.parseValues(start)}, ${Query.parseValues(end)})`;\n    }\n    static{\n        this.startsWith = (attribute, value)=>Query.addQuery(attribute, \"startsWith\", value);\n    }\n    static{\n        this.endsWith = (attribute, value)=>Query.addQuery(attribute, \"endsWith\", value);\n    }\n    static{\n        this.select = (attributes)=>`select([${attributes.map((attr)=>`\"${attr}\"`).join(\",\")}])`;\n    }\n    static{\n        this.search = (attribute, value)=>Query.addQuery(attribute, \"search\", value);\n    }\n    static{\n        this.orderDesc = (attribute)=>`orderDesc(\"${attribute}\")`;\n    }\n    static{\n        this.orderAsc = (attribute)=>`orderAsc(\"${attribute}\")`;\n    }\n    static{\n        this.cursorAfter = (documentId)=>`cursorAfter(\"${documentId}\")`;\n    }\n    static{\n        this.cursorBefore = (documentId)=>`cursorBefore(\"${documentId}\")`;\n    }\n    static{\n        this.limit = (limit)=>`limit(${limit})`;\n    }\n    static{\n        this.offset = (offset)=>`offset(${offset})`;\n    }\n    static{\n        this.addQuery = (attribute, method, value)=>value instanceof Array ? `${method}(\"${attribute}\", [${value.map((v)=>Query.parseValues(v)).join(\",\")}])` : `${method}(\"${attribute}\", [${Query.parseValues(value)}])`;\n    }\n    static{\n        this.parseValues = (value)=>typeof value === \"string\" || value instanceof String ? `\"${value}\"` : `${value}`;\n    }\n}\nmodule.exports = Query;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9xdWVyeS5qcz82NTNkIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFF1ZXJ5IHtcbiAgc3RhdGljIGVxdWFsID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgUXVlcnkuYWRkUXVlcnkoYXR0cmlidXRlLCBcImVxdWFsXCIsIHZhbHVlKTtcblxuICBzdGF0aWMgbm90RXF1YWwgPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBRdWVyeS5hZGRRdWVyeShhdHRyaWJ1dGUsIFwibm90RXF1YWxcIiwgdmFsdWUpO1xuXG4gIHN0YXRpYyBsZXNzVGhhbiA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIFF1ZXJ5LmFkZFF1ZXJ5KGF0dHJpYnV0ZSwgXCJsZXNzVGhhblwiLCB2YWx1ZSk7XG5cbiAgc3RhdGljIGxlc3NUaGFuRXF1YWwgPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBRdWVyeS5hZGRRdWVyeShhdHRyaWJ1dGUsIFwibGVzc1RoYW5FcXVhbFwiLCB2YWx1ZSk7XG5cbiAgc3RhdGljIGdyZWF0ZXJUaGFuID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgUXVlcnkuYWRkUXVlcnkoYXR0cmlidXRlLCBcImdyZWF0ZXJUaGFuXCIsIHZhbHVlKTtcblxuICBzdGF0aWMgZ3JlYXRlclRoYW5FcXVhbCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIFF1ZXJ5LmFkZFF1ZXJ5KGF0dHJpYnV0ZSwgXCJncmVhdGVyVGhhbkVxdWFsXCIsIHZhbHVlKTtcblxuICBzdGF0aWMgaXNOdWxsID0gKGF0dHJpYnV0ZSkgPT5cbiAgICBgaXNOdWxsKFwiJHthdHRyaWJ1dGV9XCIpYDtcblxuICBzdGF0aWMgaXNOb3ROdWxsID0gKGF0dHJpYnV0ZSkgPT5cbiAgICBgaXNOb3ROdWxsKFwiJHthdHRyaWJ1dGV9XCIpYDtcblxuICBzdGF0aWMgYmV0d2VlbiA9IChhdHRyaWJ1dGUsIHN0YXJ0LCBlbmQpID0+XG4gICAgYGJldHdlZW4oXCIke2F0dHJpYnV0ZX1cIiwgJHtRdWVyeS5wYXJzZVZhbHVlcyhzdGFydCl9LCAke1F1ZXJ5LnBhcnNlVmFsdWVzKGVuZCl9KWBcblxuICBzdGF0aWMgc3RhcnRzV2l0aCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIFF1ZXJ5LmFkZFF1ZXJ5KGF0dHJpYnV0ZSwgXCJzdGFydHNXaXRoXCIsIHZhbHVlKTtcblxuICBzdGF0aWMgZW5kc1dpdGggPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBRdWVyeS5hZGRRdWVyeShhdHRyaWJ1dGUsIFwiZW5kc1dpdGhcIiwgdmFsdWUpO1xuXG4gIHN0YXRpYyBzZWxlY3QgPSAoYXR0cmlidXRlcykgPT5cbiAgICBgc2VsZWN0KFske2F0dHJpYnV0ZXMubWFwKChhdHRyKSA9PiBgXCIke2F0dHJ9XCJgKS5qb2luKFwiLFwiKX1dKWA7XG5cbiAgc3RhdGljIHNlYXJjaCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIFF1ZXJ5LmFkZFF1ZXJ5KGF0dHJpYnV0ZSwgXCJzZWFyY2hcIiwgdmFsdWUpO1xuXG4gIHN0YXRpYyBvcmRlckRlc2MgPSAoYXR0cmlidXRlKSA9PlxuICAgIGBvcmRlckRlc2MoXCIke2F0dHJpYnV0ZX1cIilgO1xuXG4gIHN0YXRpYyBvcmRlckFzYyA9IChhdHRyaWJ1dGUpID0+XG4gICAgYG9yZGVyQXNjKFwiJHthdHRyaWJ1dGV9XCIpYDtcblxuICBzdGF0aWMgY3Vyc29yQWZ0ZXIgPSAoZG9jdW1lbnRJZCkgPT5cbiAgICBgY3Vyc29yQWZ0ZXIoXCIke2RvY3VtZW50SWR9XCIpYDtcblxuICBzdGF0aWMgY3Vyc29yQmVmb3JlID0gKGRvY3VtZW50SWQpID0+XG4gICAgYGN1cnNvckJlZm9yZShcIiR7ZG9jdW1lbnRJZH1cIilgO1xuXG4gIHN0YXRpYyBsaW1pdCA9IChsaW1pdCkgPT5cbiAgICBgbGltaXQoJHtsaW1pdH0pYDtcblxuICBzdGF0aWMgb2Zmc2V0ID0gKG9mZnNldCkgPT5cbiAgICBgb2Zmc2V0KCR7b2Zmc2V0fSlgO1xuXG4gIHN0YXRpYyBhZGRRdWVyeSA9IChhdHRyaWJ1dGUsIG1ldGhvZCwgdmFsdWUpID0+XG4gICAgdmFsdWUgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgPyBgJHttZXRob2R9KFwiJHthdHRyaWJ1dGV9XCIsIFske3ZhbHVlXG4gICAgICAgICAgLm1hcCgodikgPT4gUXVlcnkucGFyc2VWYWx1ZXModikpXG4gICAgICAgICAgLmpvaW4oXCIsXCIpfV0pYFxuICAgICAgOiBgJHttZXRob2R9KFwiJHthdHRyaWJ1dGV9XCIsIFske1F1ZXJ5LnBhcnNlVmFsdWVzKHZhbHVlKX1dKWA7XG5cbiAgc3RhdGljIHBhcnNlVmFsdWVzID0gKHZhbHVlKSA9PlxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZ1xuICAgICAgPyBgXCIke3ZhbHVlfVwiYFxuICAgICAgOiBgJHt2YWx1ZX1gO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXJ5O1xuIl0sIm5hbWVzIjpbIlF1ZXJ5IiwiZXF1YWwiLCJhdHRyaWJ1dGUiLCJ2YWx1ZSIsImFkZFF1ZXJ5Iiwibm90RXF1YWwiLCJsZXNzVGhhbiIsImxlc3NUaGFuRXF1YWwiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuRXF1YWwiLCJpc051bGwiLCJpc05vdE51bGwiLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJwYXJzZVZhbHVlcyIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInNlbGVjdCIsImF0dHJpYnV0ZXMiLCJtYXAiLCJhdHRyIiwiam9pbiIsInNlYXJjaCIsIm9yZGVyRGVzYyIsIm9yZGVyQXNjIiwiY3Vyc29yQWZ0ZXIiLCJkb2N1bWVudElkIiwiY3Vyc29yQmVmb3JlIiwibGltaXQiLCJvZmZzZXQiLCJtZXRob2QiLCJBcnJheSIsInYiLCJTdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQTs7YUFDR0MsUUFBUSxDQUFDQyxXQUFXQyxRQUN6QkgsTUFBTUksUUFBUSxDQUFDRixXQUFXLFNBQVNDOzs7YUFFOUJFLFdBQVcsQ0FBQ0gsV0FBV0MsUUFDNUJILE1BQU1JLFFBQVEsQ0FBQ0YsV0FBVyxZQUFZQzs7O2FBRWpDRyxXQUFXLENBQUNKLFdBQVdDLFFBQzVCSCxNQUFNSSxRQUFRLENBQUNGLFdBQVcsWUFBWUM7OzthQUVqQ0ksZ0JBQWdCLENBQUNMLFdBQVdDLFFBQ2pDSCxNQUFNSSxRQUFRLENBQUNGLFdBQVcsaUJBQWlCQzs7O2FBRXRDSyxjQUFjLENBQUNOLFdBQVdDLFFBQy9CSCxNQUFNSSxRQUFRLENBQUNGLFdBQVcsZUFBZUM7OzthQUVwQ00sbUJBQW1CLENBQUNQLFdBQVdDLFFBQ3BDSCxNQUFNSSxRQUFRLENBQUNGLFdBQVcsb0JBQW9CQzs7O2FBRXpDTyxTQUFTLENBQUNSLFlBQ2YsQ0FBQyxRQUFRLEVBQUVBLFVBQVUsRUFBRSxDQUFDOzs7YUFFbkJTLFlBQVksQ0FBQ1QsWUFDbEIsQ0FBQyxXQUFXLEVBQUVBLFVBQVUsRUFBRSxDQUFDOzs7YUFFdEJVLFVBQVUsQ0FBQ1YsV0FBV1csT0FBT0MsTUFDbEMsQ0FBQyxTQUFTLEVBQUVaLFVBQVUsR0FBRyxFQUFFRixNQUFNZSxXQUFXLENBQUNGLE9BQU8sRUFBRSxFQUFFYixNQUFNZSxXQUFXLENBQUNELEtBQUssQ0FBQyxDQUFDOzs7YUFFNUVFLGFBQWEsQ0FBQ2QsV0FBV0MsUUFDOUJILE1BQU1JLFFBQVEsQ0FBQ0YsV0FBVyxjQUFjQzs7O2FBRW5DYyxXQUFXLENBQUNmLFdBQVdDLFFBQzVCSCxNQUFNSSxRQUFRLENBQUNGLFdBQVcsWUFBWUM7OzthQUVqQ2UsU0FBUyxDQUFDQyxhQUNmLENBQUMsUUFBUSxFQUFFQSxXQUFXQyxHQUFHLENBQUMsQ0FBQ0MsT0FBUyxDQUFDLENBQUMsRUFBRUEsS0FBSyxDQUFDLENBQUMsRUFBRUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOzs7YUFFekRDLFNBQVMsQ0FBQ3JCLFdBQVdDLFFBQzFCSCxNQUFNSSxRQUFRLENBQUNGLFdBQVcsVUFBVUM7OzthQUUvQnFCLFlBQVksQ0FBQ3RCLFlBQ2xCLENBQUMsV0FBVyxFQUFFQSxVQUFVLEVBQUUsQ0FBQzs7O2FBRXRCdUIsV0FBVyxDQUFDdkIsWUFDakIsQ0FBQyxVQUFVLEVBQUVBLFVBQVUsRUFBRSxDQUFDOzs7YUFFckJ3QixjQUFjLENBQUNDLGFBQ3BCLENBQUMsYUFBYSxFQUFFQSxXQUFXLEVBQUUsQ0FBQzs7O2FBRXpCQyxlQUFlLENBQUNELGFBQ3JCLENBQUMsY0FBYyxFQUFFQSxXQUFXLEVBQUUsQ0FBQzs7O2FBRTFCRSxRQUFRLENBQUNBLFFBQ2QsQ0FBQyxNQUFNLEVBQUVBLE1BQU0sQ0FBQyxDQUFDOzs7YUFFWkMsU0FBUyxDQUFDQSxTQUNmLENBQUMsT0FBTyxFQUFFQSxPQUFPLENBQUMsQ0FBQzs7O2FBRWQxQixXQUFXLENBQUNGLFdBQVc2QixRQUFRNUIsUUFDcENBLGlCQUFpQjZCLFFBQ2IsQ0FBQyxFQUFFRCxPQUFPLEVBQUUsRUFBRTdCLFVBQVUsSUFBSSxFQUFFQyxNQUMzQmlCLEdBQUcsQ0FBQyxDQUFDYSxJQUFNakMsTUFBTWUsV0FBVyxDQUFDa0IsSUFDN0JYLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUNoQixDQUFDLEVBQUVTLE9BQU8sRUFBRSxFQUFFN0IsVUFBVSxJQUFJLEVBQUVGLE1BQU1lLFdBQVcsQ0FBQ1osT0FBTyxFQUFFLENBQUM7OzthQUV6RFksY0FBYyxDQUFDWixRQUNwQixPQUFPQSxVQUFVLFlBQVlBLGlCQUFpQitCLFNBQzFDLENBQUMsQ0FBQyxFQUFFL0IsTUFBTSxDQUFDLENBQUMsR0FDWixDQUFDLEVBQUVBLE1BQU0sQ0FBQzs7QUFDbEI7QUFFQWdDLE9BQU9DLE9BQU8sR0FBR3BDIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL3F1ZXJ5LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/role.js":
/*!************************************************!*\
  !*** ./node_modules/node-appwrite/lib/role.js ***!
  \************************************************/
/***/ ((module) => {

eval("/**\n * Helper class to generate role strings for `Permission`.\n */ class Role {\n    static{\n        /**\n     * Grants access to anyone.\n     *\n     * This includes authenticated and unauthenticated users.\n     *\n     * @returns {string}\n     */ this.any = ()=>{\n            return \"any\";\n        };\n    }\n    static{\n        /**\n     * Grants access to a specific user by user ID.\n     *\n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} id \n     * @param {string} status \n     * @returns {string}\n     */ this.user = (id, status = \"\")=>{\n            if (status === \"\") {\n                return `user:${id}`;\n            }\n            return `user:${id}/${status}`;\n        };\n    }\n    static{\n        /**\n     * Grants access to any authenticated or anonymous user.\n     *\n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} status \n     * @returns {string}\n     */ this.users = (status = \"\")=>{\n            if (status === \"\") {\n                return \"users\";\n            }\n            return `users/${status}`;\n        };\n    }\n    static{\n        /**\n     * Grants access to any guest user without a session.\n     *\n     * Authenticated users don't have access to this role.\n     *\n     * @returns {string}\n     */ this.guests = ()=>{\n            return \"guests\";\n        };\n    }\n    static{\n        /**\n     * Grants access to a team by team ID.\n     *\n     * You can optionally pass a role for `role` to target\n     * team members with the specified role.\n     * \n     * @param {string} id \n     * @param {string} role \n     * @returns {string}\n     */ this.team = (id, role = \"\")=>{\n            if (role === \"\") {\n                return \"team:\" + id;\n            }\n            return \"team:\" + id + \"/\" + role;\n        };\n    }\n    static{\n        /**\n     * Grants access to a specific member of a team.\n     *\n     * When the member is removed from the team, they will\n     * no longer have access.\n     * \n     * @param {string} id \n     * @returns {string}\n     */ this.member = (id)=>{\n            return \"member:\" + id;\n        };\n    }\n    static{\n        /**\n     * Grants access to a user with the specified label.\n     *\n     * @param {string} name \n     * @returns  {string}\n     */ this.label = (name)=>{\n            return \"label:\" + name;\n        };\n    }\n}\nmodule.exports = Role;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9yb2xlLmpzPzBkMmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gZ2VuZXJhdGUgcm9sZSBzdHJpbmdzIGZvciBgUGVybWlzc2lvbmAuXG4gKi9cbmNsYXNzIFJvbGUge1xuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhbnlvbmUuXG4gICAgICpcbiAgICAgKiBUaGlzIGluY2x1ZGVzIGF1dGhlbnRpY2F0ZWQgYW5kIHVuYXV0aGVudGljYXRlZCB1c2Vycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGFueSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICdhbnknXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhIHNwZWNpZmljIHVzZXIgYnkgdXNlciBJRC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb3B0aW9uYWxseSBwYXNzIHZlcmlmaWVkIG9yIHVudmVyaWZpZWQgZm9yXG4gICAgICogYHN0YXR1c2AgdG8gdGFyZ2V0IHNwZWNpZmljIHR5cGVzIG9mIHVzZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgdXNlciA9IChpZCwgc3RhdHVzID0gJycpID0+IHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBgdXNlcjoke2lkfWBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYHVzZXI6JHtpZH0vJHtzdGF0dXN9YFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55IGF1dGhlbnRpY2F0ZWQgb3IgYW5vbnltb3VzIHVzZXIuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyB2ZXJpZmllZCBvciB1bnZlcmlmaWVkIGZvclxuICAgICAqIGBzdGF0dXNgIHRvIHRhcmdldCBzcGVjaWZpYyB0eXBlcyBvZiB1c2Vycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgdXNlcnMgPSAoc3RhdHVzID0gJycpID0+IHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiAndXNlcnMnXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGB1c2Vycy8ke3N0YXR1c31gXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhbnkgZ3Vlc3QgdXNlciB3aXRob3V0IGEgc2Vzc2lvbi5cbiAgICAgKlxuICAgICAqIEF1dGhlbnRpY2F0ZWQgdXNlcnMgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhpcyByb2xlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ3Vlc3RzID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gJ2d1ZXN0cydcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgdGVhbSBieSB0ZWFtIElELlxuICAgICAqXG4gICAgICogWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgYSByb2xlIGZvciBgcm9sZWAgdG8gdGFyZ2V0XG4gICAgICogdGVhbSBtZW1iZXJzIHdpdGggdGhlIHNwZWNpZmllZCByb2xlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcm9sZSBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyB0ZWFtID0gKGlkLCByb2xlID0gJycpID0+IHtcbiAgICAgICAgaWYgKHJvbGUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RlYW06JyArIGlkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICd0ZWFtOicgKyBpZCArICcvJyArIHJvbGVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgc3BlY2lmaWMgbWVtYmVyIG9mIGEgdGVhbS5cbiAgICAgKlxuICAgICAqIFdoZW4gdGhlIG1lbWJlciBpcyByZW1vdmVkIGZyb20gdGhlIHRlYW0sIHRoZXkgd2lsbFxuICAgICAqIG5vIGxvbmdlciBoYXZlIGFjY2Vzcy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgbWVtYmVyID0gKGlkKSA9PiB7XG4gICAgICAgIHJldHVybiAnbWVtYmVyOicgKyBpZFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYW50cyBhY2Nlc3MgdG8gYSB1c2VyIHdpdGggdGhlIHNwZWNpZmllZCBsYWJlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgICAqIEByZXR1cm5zICB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBsYWJlbCA9IChuYW1lKSA9PiB7XG4gICAgICAgIHJldHVybiAnbGFiZWw6JyArIG5hbWU7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvbGU7Il0sIm5hbWVzIjpbIlJvbGUiLCJhbnkiLCJ1c2VyIiwiaWQiLCJzdGF0dXMiLCJ1c2VycyIsImd1ZXN0cyIsInRlYW0iLCJyb2xlIiwibWVtYmVyIiwibGFiZWwiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUMsR0FDRCxNQUFNQTs7UUFFRjs7Ozs7O0tBTUMsUUFDTUMsTUFBTTtZQUNULE9BQU87UUFDWDs7O1FBRUE7Ozs7Ozs7OztLQVNDLFFBQ01DLE9BQU8sQ0FBQ0MsSUFBSUMsU0FBUyxFQUFFO1lBQzFCLElBQUlBLFdBQVcsSUFBSTtnQkFDZixPQUFPLENBQUMsS0FBSyxFQUFFRCxHQUFHLENBQUM7WUFDdkI7WUFDQSxPQUFPLENBQUMsS0FBSyxFQUFFQSxHQUFHLENBQUMsRUFBRUMsT0FBTyxDQUFDO1FBQ2pDOzs7UUFFQTs7Ozs7Ozs7S0FRQyxRQUNNQyxRQUFRLENBQUNELFNBQVMsRUFBRTtZQUN2QixJQUFJQSxXQUFXLElBQUk7Z0JBQ2YsT0FBTztZQUNYO1lBQ0EsT0FBTyxDQUFDLE1BQU0sRUFBRUEsT0FBTyxDQUFDO1FBQzVCOzs7UUFFQTs7Ozs7O0tBTUMsUUFDTUUsU0FBUztZQUNaLE9BQU87UUFDWDs7O1FBRUE7Ozs7Ozs7OztLQVNDLFFBQ01DLE9BQU8sQ0FBQ0osSUFBSUssT0FBTyxFQUFFO1lBQ3hCLElBQUlBLFNBQVMsSUFBSTtnQkFDYixPQUFPLFVBQVVMO1lBQ3JCO1lBQ0EsT0FBTyxVQUFVQSxLQUFLLE1BQU1LO1FBQ2hDOzs7UUFFQTs7Ozs7Ozs7S0FRQyxRQUNNQyxTQUFTLENBQUNOO1lBQ2IsT0FBTyxZQUFZQTtRQUN2Qjs7O1FBRUE7Ozs7O0tBS0MsUUFDTU8sUUFBUSxDQUFDQztZQUNaLE9BQU8sV0FBV0E7UUFDdEI7O0FBQ0o7QUFFQUMsT0FBT0MsT0FBTyxHQUFHYiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9yb2xlLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/role.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/service.js":
/*!***************************************************!*\
  !*** ./node_modules/node-appwrite/lib/service.js ***!
  \***************************************************/
/***/ ((module) => {

eval("class Service {\n    /**\n     * @param client\n     */ constructor(client){\n        this.client = client;\n    }\n}\nmodule.exports = Service;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9zZXJ2aWNlLmpzP2YxMDEiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNsaWVudFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2VydmljZTsiXSwibmFtZXMiOlsiU2VydmljZSIsImNvbnN0cnVjdG9yIiwiY2xpZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUE7SUFDRjs7S0FFQyxHQUNEQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2xCO0FBQ0o7QUFFQUMsT0FBT0MsT0FBTyxHQUFHSiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/account.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/account.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Account extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * Get account\n     *\n     * Get the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async get() {\n        const apiPath = \"/account\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update email\n     *\n     * Update currently logged in user account email address. After changing user\n     * address, the user confirmation status will get reset. A new confirmation\n     * email is not sent automatically however you can use the send confirmation\n     * email endpoint again to send the confirmation email. For security measures,\n     * user password is required to complete this request.\n     * This endpoint can also be used to convert an anonymous account to a normal\n     * one, by passing an email address and a new password.\n     * \n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateEmail(email, password) {\n        const apiPath = \"/account/email\";\n        let payload = {};\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List Identities\n     *\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listIdentities(queries) {\n        const apiPath = \"/account/identities\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete Identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteIdentity(identityId) {\n        const apiPath = \"/account/identities/{identityId}\".replace(\"{identityId}\", identityId);\n        let payload = {};\n        if (typeof identityId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List logs\n     *\n     * Get the list of latest security activity logs for the currently logged in\n     * user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listLogs(queries) {\n        const apiPath = \"/account/logs\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update name\n     *\n     * Update currently logged in user account name.\n     *\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateName(name) {\n        const apiPath = \"/account/name\";\n        let payload = {};\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update password\n     *\n     * Update currently logged in user password. For validation, user is required\n     * to pass in the new password, and the old password. For users created with\n     * OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} password\n     * @param {string} oldPassword\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePassword(password, oldPassword) {\n        const apiPath = \"/account/password\";\n        let payload = {};\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof oldPassword !== \"undefined\") {\n            payload[\"oldPassword\"] = oldPassword;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update phone\n     *\n     * Update the currently logged in user's phone number. After updating the\n     * phone number, the phone verification status will be reset. A confirmation\n     * SMS is not sent automatically, however you can use the [POST\n     * /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification)\n     * endpoint to send a confirmation SMS.\n     *\n     * @param {string} phone\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePhone(phone, password) {\n        const apiPath = \"/account/phone\";\n        let payload = {};\n        if (typeof phone === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof phone !== \"undefined\") {\n            payload[\"phone\"] = phone;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get account preferences\n     *\n     * Get the preferences as a key-value object for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getPrefs() {\n        const apiPath = \"/account/prefs\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update preferences\n     *\n     * Update currently logged in user account preferences. The object you pass is\n     * stored as is, and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws error if exceeded.\n     *\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePrefs(prefs) {\n        const apiPath = \"/account/prefs\";\n        let payload = {};\n        if (typeof prefs === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        if (typeof prefs !== \"undefined\") {\n            payload[\"prefs\"] = prefs;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create password recovery\n     *\n     * Sends the user an email with a temporary secret key for password reset.\n     * When the user clicks the confirmation link he is redirected back to your\n     * app password reset URL with the secret key and email address values\n     * attached to the URL query string. Use the query string params to submit a\n     * request to the [PUT\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery)\n     * endpoint to complete the process. The verification link sent to the user's\n     * email address is valid for 1 hour.\n     *\n     * @param {string} email\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createRecovery(email, url) {\n        const apiPath = \"/account/recovery\";\n        let payload = {};\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof url === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create password recovery (confirmation)\n     *\n     * Use this endpoint to complete the user account password reset. Both the\n     * **userId** and **secret** arguments will be passed as query parameters to\n     * the redirect URL you have provided when sending your request to the [POST\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery)\n     * endpoint.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @param {string} password\n     * @param {string} passwordAgain\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateRecovery(userId, secret, password, passwordAgain) {\n        const apiPath = \"/account/recovery\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordAgain === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordAgain\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof passwordAgain !== \"undefined\") {\n            payload[\"passwordAgain\"] = passwordAgain;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List sessions\n     *\n     * Get the list of active sessions across different devices for the currently\n     * logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listSessions() {\n        const apiPath = \"/account/sessions\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete sessions\n     *\n     * Delete all sessions from the user account and remove any sessions cookies\n     * from the end client.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteSessions() {\n        const apiPath = \"/account/sessions\";\n        let payload = {};\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get session\n     *\n     * Use this endpoint to get a logged in user's session using a Session ID.\n     * Inputting 'current' will return the current session being used.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getSession(sessionId) {\n        const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n        let payload = {};\n        if (typeof sessionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update OAuth session (refresh tokens)\n     *\n     * Access tokens have limited lifespan and expire to mitigate security risks.\n     * If session was created using an OAuth provider, this route can be used to\n     * \"refresh\" the access token.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateSession(sessionId) {\n        const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n        let payload = {};\n        if (typeof sessionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete session\n     *\n     * Logout the user. Use 'current' as the session ID to logout on this device,\n     * use a session ID to logout on another device. If you're looking to logout\n     * the user on all devices, use [Delete\n     * Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions)\n     * instead.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteSession(sessionId) {\n        const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n        let payload = {};\n        if (typeof sessionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update status\n     *\n     * Block the currently logged in user account. Behind the scene, the user\n     * record is not deleted but permanently blocked from any access. To\n     * completely delete a user, use the Users API instead.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateStatus() {\n        const apiPath = \"/account/status\";\n        let payload = {};\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create email verification\n     *\n     * Use this endpoint to send a verification message to your user email address\n     * to confirm they are the valid owners of that address. Both the **userId**\n     * and **secret** arguments will be passed as query parameters to the URL you\n     * have provided to be attached to the verification email. The provided URL\n     * should redirect the user back to your app and allow you to complete the\n     * verification process by verifying both the **userId** and **secret**\n     * parameters. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification).\n     * The verification link sent to the user's email address is valid for 7 days.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createVerification(url) {\n        const apiPath = \"/account/verification\";\n        let payload = {};\n        if (typeof url === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create email verification (confirmation)\n     *\n     * Use this endpoint to complete the user email verification process. Use both\n     * the **userId** and **secret** parameters that were attached to your app URL\n     * to verify the user email ownership. If confirmed this route will return a\n     * 200 status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateVerification(userId, secret) {\n        const apiPath = \"/account/verification\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create phone verification\n     *\n     * Use this endpoint to send a verification SMS to the currently logged in\n     * user. This endpoint is meant for use after updating a user's phone number\n     * using the\n     * [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone)\n     * endpoint. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification).\n     * The verification code sent to the user's phone number is valid for 15\n     * minutes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createPhoneVerification() {\n        const apiPath = \"/account/verification/phone\";\n        let payload = {};\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create phone verification (confirmation)\n     *\n     * Use this endpoint to complete the user phone verification process. Use the\n     * **userId** and **secret** that were sent to your user's phone number to\n     * verify the user email ownership. If confirmed this route will return a 200\n     * status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePhoneVerification(userId, secret) {\n        const apiPath = \"/account/verification/phone\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/account.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/avatars.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/avatars.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Avatars extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * Get browser icon\n     *\n     * You can use this endpoint to show different browser icons to your users.\n     * The code argument receives the browser code as it appears in your user [GET\n     * /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions)\n     * endpoint. Use width, height and quality arguments to change the output\n     * settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     *\n     * @param {string} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getBrowser(code, width, height, quality) {\n        const apiPath = \"/avatars/browsers/{code}\".replace(\"{code}\", code);\n        let payload = {};\n        if (typeof code === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get credit card icon\n     *\n     * The credit card endpoint will return you the icon of the credit card\n     * provider you need. Use width, height and quality arguments to change the\n     * output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {string} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getCreditCard(code, width, height, quality) {\n        const apiPath = \"/avatars/credit-cards/{code}\".replace(\"{code}\", code);\n        let payload = {};\n        if (typeof code === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get favicon\n     *\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\n     * website URL.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getFavicon(url) {\n        const apiPath = \"/avatars/favicon\";\n        let payload = {};\n        if (typeof url === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get country flag\n     *\n     * You can use this endpoint to show different country flags icons to your\n     * users. The code argument receives the 2 letter country code. Use width,\n     * height and quality arguments to change the output settings. Country codes\n     * follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {string} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getFlag(code, width, height, quality) {\n        const apiPath = \"/avatars/flags/{code}\".replace(\"{code}\", code);\n        let payload = {};\n        if (typeof code === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get image from URL\n     *\n     * Use this endpoint to fetch a remote image URL and crop it to any image size\n     * you want. This endpoint is very useful if you need to crop and display\n     * remote images in your app or in case you want to make sure a 3rd party\n     * image is properly served using a TLS protocol.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 400x400px.\n     * \n     *\n     * @param {string} url\n     * @param {number} width\n     * @param {number} height\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getImage(url, width, height) {\n        const apiPath = \"/avatars/image\";\n        let payload = {};\n        if (typeof url === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get user initials\n     *\n     * Use this endpoint to show your user initials avatar icon on your website or\n     * app. By default, this route will try to print your logged-in user name or\n     * email initials. You can also overwrite the user name if you pass the 'name'\n     * parameter. If no name is given and no user is logged, an empty avatar will\n     * be returned.\n     * \n     * You can use the color and background params to change the avatar colors. By\n     * default, a random theme will be selected. The random theme will persist for\n     * the user's initials when reloading the same theme will always return for\n     * the same initials.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {string} name\n     * @param {number} width\n     * @param {number} height\n     * @param {string} background\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getInitials(name, width, height, background) {\n        const apiPath = \"/avatars/initials\";\n        let payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof background !== \"undefined\") {\n            payload[\"background\"] = background;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get QR code\n     *\n     * Converts a given plain text to a QR code image. You can use the query\n     * parameters to change the size and style of the resulting image.\n     * \n     *\n     * @param {string} text\n     * @param {number} size\n     * @param {number} margin\n     * @param {boolean} download\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQR(text, size, margin, download) {\n        const apiPath = \"/avatars/qr\";\n        let payload = {};\n        if (typeof text === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"text\"');\n        }\n        if (typeof text !== \"undefined\") {\n            payload[\"text\"] = text;\n        }\n        if (typeof size !== \"undefined\") {\n            payload[\"size\"] = size;\n        }\n        if (typeof margin !== \"undefined\") {\n            payload[\"margin\"] = margin;\n        }\n        if (typeof download !== \"undefined\") {\n            payload[\"download\"] = download;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n}\nmodule.exports = Avatars;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvc2VydmljZXMvYXZhdGFycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1HLFNBQVNILG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1JLFNBQVNKLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU0sRUFBRUssU0FBUyxFQUFFLEdBQUdMLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1NLEtBQUtOLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1PLGdCQUFnQlI7SUFFakJTLFlBQVlMLE1BQU0sQ0FDbEI7UUFDRyxLQUFLLENBQUNBO0lBQ1Q7SUFHRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FvQkMsR0FDRCxNQUFNTSxXQUFXQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0MsTUFBTUMsVUFBVSwyQkFBMkJDLE9BQU8sQ0FBQyxVQUFVTDtRQUM3RCxJQUFJTSxVQUFVLENBQUM7UUFDZixJQUFJLE9BQU9OLFNBQVMsYUFBYTtZQUM3QixNQUFNLElBQUlULGtCQUFrQjtRQUNoQztRQUdBLElBQUksT0FBT1UsVUFBVSxhQUFhO1lBQzlCSyxPQUFPLENBQUMsUUFBUSxHQUFHTDtRQUN2QjtRQUVBLElBQUksT0FBT0MsV0FBVyxhQUFhO1lBQy9CSSxPQUFPLENBQUMsU0FBUyxHQUFHSjtRQUN4QjtRQUVBLElBQUksT0FBT0MsWUFBWSxhQUFhO1lBQ2hDRyxPQUFPLENBQUMsVUFBVSxHQUFHSDtRQUN6QjtRQUVBLE9BQU8sTUFBTSxJQUFJLENBQUNWLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDLE9BQU9ILFNBQVM7WUFDMUMsZ0JBQWdCO1FBQ3BCLEdBQUdFLFNBQVM7SUFDaEI7SUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW1CQyxHQUNELE1BQU1FLGNBQWNSLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUM5QyxNQUFNQyxVQUFVLCtCQUErQkMsT0FBTyxDQUFDLFVBQVVMO1FBQ2pFLElBQUlNLFVBQVUsQ0FBQztRQUNmLElBQUksT0FBT04sU0FBUyxhQUFhO1lBQzdCLE1BQU0sSUFBSVQsa0JBQWtCO1FBQ2hDO1FBR0EsSUFBSSxPQUFPVSxVQUFVLGFBQWE7WUFDOUJLLE9BQU8sQ0FBQyxRQUFRLEdBQUdMO1FBQ3ZCO1FBRUEsSUFBSSxPQUFPQyxXQUFXLGFBQWE7WUFDL0JJLE9BQU8sQ0FBQyxTQUFTLEdBQUdKO1FBQ3hCO1FBRUEsSUFBSSxPQUFPQyxZQUFZLGFBQWE7WUFDaENHLE9BQU8sQ0FBQyxVQUFVLEdBQUdIO1FBQ3pCO1FBRUEsT0FBTyxNQUFNLElBQUksQ0FBQ1YsTUFBTSxDQUFDYyxJQUFJLENBQUMsT0FBT0gsU0FBUztZQUMxQyxnQkFBZ0I7UUFDcEIsR0FBR0UsU0FBUztJQUNoQjtJQUVBOzs7Ozs7Ozs7O0tBVUMsR0FDRCxNQUFNRyxXQUFXQyxHQUFHLEVBQUU7UUFDbEIsTUFBTU4sVUFBVTtRQUNoQixJQUFJRSxVQUFVLENBQUM7UUFDZixJQUFJLE9BQU9JLFFBQVEsYUFBYTtZQUM1QixNQUFNLElBQUluQixrQkFBa0I7UUFDaEM7UUFHQSxJQUFJLE9BQU9tQixRQUFRLGFBQWE7WUFDNUJKLE9BQU8sQ0FBQyxNQUFNLEdBQUdJO1FBQ3JCO1FBRUEsT0FBTyxNQUFNLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDLE9BQU9ILFNBQVM7WUFDMUMsZ0JBQWdCO1FBQ3BCLEdBQUdFLFNBQVM7SUFDaEI7SUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FvQkMsR0FDRCxNQUFNSyxRQUFRWCxJQUFJLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDeEMsTUFBTUMsVUFBVSx3QkFBd0JDLE9BQU8sQ0FBQyxVQUFVTDtRQUMxRCxJQUFJTSxVQUFVLENBQUM7UUFDZixJQUFJLE9BQU9OLFNBQVMsYUFBYTtZQUM3QixNQUFNLElBQUlULGtCQUFrQjtRQUNoQztRQUdBLElBQUksT0FBT1UsVUFBVSxhQUFhO1lBQzlCSyxPQUFPLENBQUMsUUFBUSxHQUFHTDtRQUN2QjtRQUVBLElBQUksT0FBT0MsV0FBVyxhQUFhO1lBQy9CSSxPQUFPLENBQUMsU0FBUyxHQUFHSjtRQUN4QjtRQUVBLElBQUksT0FBT0MsWUFBWSxhQUFhO1lBQ2hDRyxPQUFPLENBQUMsVUFBVSxHQUFHSDtRQUN6QjtRQUVBLE9BQU8sTUFBTSxJQUFJLENBQUNWLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDLE9BQU9ILFNBQVM7WUFDMUMsZ0JBQWdCO1FBQ3BCLEdBQUdFLFNBQVM7SUFDaEI7SUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW1CQyxHQUNELE1BQU1NLFNBQVNGLEdBQUcsRUFBRVQsS0FBSyxFQUFFQyxNQUFNLEVBQUU7UUFDL0IsTUFBTUUsVUFBVTtRQUNoQixJQUFJRSxVQUFVLENBQUM7UUFDZixJQUFJLE9BQU9JLFFBQVEsYUFBYTtZQUM1QixNQUFNLElBQUluQixrQkFBa0I7UUFDaEM7UUFHQSxJQUFJLE9BQU9tQixRQUFRLGFBQWE7WUFDNUJKLE9BQU8sQ0FBQyxNQUFNLEdBQUdJO1FBQ3JCO1FBRUEsSUFBSSxPQUFPVCxVQUFVLGFBQWE7WUFDOUJLLE9BQU8sQ0FBQyxRQUFRLEdBQUdMO1FBQ3ZCO1FBRUEsSUFBSSxPQUFPQyxXQUFXLGFBQWE7WUFDL0JJLE9BQU8sQ0FBQyxTQUFTLEdBQUdKO1FBQ3hCO1FBRUEsT0FBTyxNQUFNLElBQUksQ0FBQ1QsTUFBTSxDQUFDYyxJQUFJLENBQUMsT0FBT0gsU0FBUztZQUMxQyxnQkFBZ0I7UUFDcEIsR0FBR0UsU0FBUztJQUNoQjtJQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTBCQyxHQUNELE1BQU1PLFlBQVlDLElBQUksRUFBRWIsS0FBSyxFQUFFQyxNQUFNLEVBQUVhLFVBQVUsRUFBRTtRQUMvQyxNQUFNWCxVQUFVO1FBQ2hCLElBQUlFLFVBQVUsQ0FBQztRQUVmLElBQUksT0FBT1EsU0FBUyxhQUFhO1lBQzdCUixPQUFPLENBQUMsT0FBTyxHQUFHUTtRQUN0QjtRQUVBLElBQUksT0FBT2IsVUFBVSxhQUFhO1lBQzlCSyxPQUFPLENBQUMsUUFBUSxHQUFHTDtRQUN2QjtRQUVBLElBQUksT0FBT0MsV0FBVyxhQUFhO1lBQy9CSSxPQUFPLENBQUMsU0FBUyxHQUFHSjtRQUN4QjtRQUVBLElBQUksT0FBT2EsZUFBZSxhQUFhO1lBQ25DVCxPQUFPLENBQUMsYUFBYSxHQUFHUztRQUM1QjtRQUVBLE9BQU8sTUFBTSxJQUFJLENBQUN0QixNQUFNLENBQUNjLElBQUksQ0FBQyxPQUFPSCxTQUFTO1lBQzFDLGdCQUFnQjtRQUNwQixHQUFHRSxTQUFTO0lBQ2hCO0lBRUE7Ozs7Ozs7Ozs7Ozs7S0FhQyxHQUNELE1BQU1VLE1BQU1DLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtRQUN0QyxNQUFNaEIsVUFBVTtRQUNoQixJQUFJRSxVQUFVLENBQUM7UUFDZixJQUFJLE9BQU9XLFNBQVMsYUFBYTtZQUM3QixNQUFNLElBQUkxQixrQkFBa0I7UUFDaEM7UUFHQSxJQUFJLE9BQU8wQixTQUFTLGFBQWE7WUFDN0JYLE9BQU8sQ0FBQyxPQUFPLEdBQUdXO1FBQ3RCO1FBRUEsSUFBSSxPQUFPQyxTQUFTLGFBQWE7WUFDN0JaLE9BQU8sQ0FBQyxPQUFPLEdBQUdZO1FBQ3RCO1FBRUEsSUFBSSxPQUFPQyxXQUFXLGFBQWE7WUFDL0JiLE9BQU8sQ0FBQyxTQUFTLEdBQUdhO1FBQ3hCO1FBRUEsSUFBSSxPQUFPQyxhQUFhLGFBQWE7WUFDakNkLE9BQU8sQ0FBQyxXQUFXLEdBQUdjO1FBQzFCO1FBRUEsT0FBTyxNQUFNLElBQUksQ0FBQzNCLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDLE9BQU9ILFNBQVM7WUFDMUMsZ0JBQWdCO1FBQ3BCLEdBQUdFLFNBQVM7SUFDaEI7QUFDSjtBQUVBZSxPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2tuZXN0Ly4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL3NlcnZpY2VzL2F2YXRhcnMuanM/YWQ5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZS5qcycpO1xuY29uc3QgQXBwd3JpdGVFeGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24uanMnKTtcbmNvbnN0IElucHV0RmlsZSA9IHJlcXVpcmUoJy4uL2lucHV0RmlsZS5qcycpO1xuY29uc3QgY2xpZW50ID0gcmVxdWlyZSgnLi4vY2xpZW50LmpzJyk7XG5jb25zdCBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmNvbnN0IHsgcHJvbWlzaWZ5IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmNsYXNzIEF2YXRhcnMgZXh0ZW5kcyBTZXJ2aWNlIHtcblxuICAgICBjb25zdHJ1Y3RvcihjbGllbnQpXG4gICAgIHtcbiAgICAgICAgc3VwZXIoY2xpZW50KTtcbiAgICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYnJvd3NlciBpY29uXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIHVzZSB0aGlzIGVuZHBvaW50IHRvIHNob3cgZGlmZmVyZW50IGJyb3dzZXIgaWNvbnMgdG8geW91ciB1c2Vycy5cbiAgICAgKiBUaGUgY29kZSBhcmd1bWVudCByZWNlaXZlcyB0aGUgYnJvd3NlciBjb2RlIGFzIGl0IGFwcGVhcnMgaW4geW91ciB1c2VyIFtHRVRcbiAgICAgKiAvYWNjb3VudC9zZXNzaW9uc10oaHR0cHM6Ly9hcHB3cml0ZS5pby9kb2NzL3JlZmVyZW5jZXMvY2xvdWQvY2xpZW50LXdlYi9hY2NvdW50I2dldFNlc3Npb25zKVxuICAgICAqIGVuZHBvaW50LiBVc2Ugd2lkdGgsIGhlaWdodCBhbmQgcXVhbGl0eSBhcmd1bWVudHMgdG8gY2hhbmdlIHRoZSBvdXRwdXRcbiAgICAgKiBzZXR0aW5ncy5cbiAgICAgKiBcbiAgICAgKiBXaGVuIG9uZSBkaW1lbnNpb24gaXMgc3BlY2lmaWVkIGFuZCB0aGUgb3RoZXIgaXMgMCwgdGhlIGltYWdlIGlzIHNjYWxlZFxuICAgICAqIHdpdGggcHJlc2VydmVkIGFzcGVjdCByYXRpby4gSWYgYm90aCBkaW1lbnNpb25zIGFyZSAwLCB0aGUgQVBJIHByb3ZpZGVzIGFuXG4gICAgICogaW1hZ2UgYXQgc291cmNlIHF1YWxpdHkuIElmIGRpbWVuc2lvbnMgYXJlIG5vdCBzcGVjaWZpZWQsIHRoZSBkZWZhdWx0IHNpemVcbiAgICAgKiBvZiBpbWFnZSByZXR1cm5lZCBpcyAxMDB4MTAwcHguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eVxuICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIGFzeW5jIGdldEJyb3dzZXIoY29kZSwgd2lkdGgsIGhlaWdodCwgcXVhbGl0eSkge1xuICAgICAgICBjb25zdCBhcGlQYXRoID0gJy9hdmF0YXJzL2Jyb3dzZXJzL3tjb2RlfScucmVwbGFjZSgne2NvZGV9JywgY29kZSk7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29kZVwiJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWyd3aWR0aCddID0gd2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGhlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ2hlaWdodCddID0gaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBxdWFsaXR5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGF5bG9hZFsncXVhbGl0eSddID0gcXVhbGl0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKCdnZXQnLCBhcGlQYXRoLCB7XG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LCBwYXlsb2FkLCAnYXJyYXlidWZmZXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY3JlZGl0IGNhcmQgaWNvblxuICAgICAqXG4gICAgICogVGhlIGNyZWRpdCBjYXJkIGVuZHBvaW50IHdpbGwgcmV0dXJuIHlvdSB0aGUgaWNvbiBvZiB0aGUgY3JlZGl0IGNhcmRcbiAgICAgKiBwcm92aWRlciB5b3UgbmVlZC4gVXNlIHdpZHRoLCBoZWlnaHQgYW5kIHF1YWxpdHkgYXJndW1lbnRzIHRvIGNoYW5nZSB0aGVcbiAgICAgKiBvdXRwdXQgc2V0dGluZ3MuXG4gICAgICogXG4gICAgICogV2hlbiBvbmUgZGltZW5zaW9uIGlzIHNwZWNpZmllZCBhbmQgdGhlIG90aGVyIGlzIDAsIHRoZSBpbWFnZSBpcyBzY2FsZWRcbiAgICAgKiB3aXRoIHByZXNlcnZlZCBhc3BlY3QgcmF0aW8uIElmIGJvdGggZGltZW5zaW9ucyBhcmUgMCwgdGhlIEFQSSBwcm92aWRlcyBhblxuICAgICAqIGltYWdlIGF0IHNvdXJjZSBxdWFsaXR5LiBJZiBkaW1lbnNpb25zIGFyZSBub3Qgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBzaXplXG4gICAgICogb2YgaW1hZ2UgcmV0dXJuZWQgaXMgMTAweDEwMHB4LlxuICAgICAqIFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHlcbiAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRDcmVkaXRDYXJkKGNvZGUsIHdpZHRoLCBoZWlnaHQsIHF1YWxpdHkpIHtcbiAgICAgICAgY29uc3QgYXBpUGF0aCA9ICcvYXZhdGFycy9jcmVkaXQtY2FyZHMve2NvZGV9Jy5yZXBsYWNlKCd7Y29kZX0nLCBjb2RlKTtcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb2RlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2RlXCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3dpZHRoJ10gPSB3aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGF5bG9hZFsnaGVpZ2h0J10gPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHF1YWxpdHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWydxdWFsaXR5J10gPSBxdWFsaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoJ2dldCcsIGFwaVBhdGgsIHtcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sIHBheWxvYWQsICdhcnJheWJ1ZmZlcicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBmYXZpY29uXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBlbmRwb2ludCB0byBmZXRjaCB0aGUgZmF2b3JpdGUgaWNvbiAoQUtBIGZhdmljb24pIG9mIGFueSByZW1vdGVcbiAgICAgKiB3ZWJzaXRlIFVSTC5cbiAgICAgKiBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRGYXZpY29uKHVybCkge1xuICAgICAgICBjb25zdCBhcGlQYXRoID0gJy9hdmF0YXJzL2Zhdmljb24nO1xuICAgICAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwidXJsXCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWyd1cmwnXSA9IHVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKCdnZXQnLCBhcGlQYXRoLCB7XG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LCBwYXlsb2FkLCAnYXJyYXlidWZmZXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY291bnRyeSBmbGFnXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIHVzZSB0aGlzIGVuZHBvaW50IHRvIHNob3cgZGlmZmVyZW50IGNvdW50cnkgZmxhZ3MgaWNvbnMgdG8geW91clxuICAgICAqIHVzZXJzLiBUaGUgY29kZSBhcmd1bWVudCByZWNlaXZlcyB0aGUgMiBsZXR0ZXIgY291bnRyeSBjb2RlLiBVc2Ugd2lkdGgsXG4gICAgICogaGVpZ2h0IGFuZCBxdWFsaXR5IGFyZ3VtZW50cyB0byBjaGFuZ2UgdGhlIG91dHB1dCBzZXR0aW5ncy4gQ291bnRyeSBjb2Rlc1xuICAgICAqIGZvbGxvdyB0aGUgW0lTTyAzMTY2LTFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTEpIHN0YW5kYXJkLlxuICAgICAqIFxuICAgICAqIFdoZW4gb25lIGRpbWVuc2lvbiBpcyBzcGVjaWZpZWQgYW5kIHRoZSBvdGhlciBpcyAwLCB0aGUgaW1hZ2UgaXMgc2NhbGVkXG4gICAgICogd2l0aCBwcmVzZXJ2ZWQgYXNwZWN0IHJhdGlvLiBJZiBib3RoIGRpbWVuc2lvbnMgYXJlIDAsIHRoZSBBUEkgcHJvdmlkZXMgYW5cbiAgICAgKiBpbWFnZSBhdCBzb3VyY2UgcXVhbGl0eS4gSWYgZGltZW5zaW9ucyBhcmUgbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgc2l6ZVxuICAgICAqIG9mIGltYWdlIHJldHVybmVkIGlzIDEwMHgxMDBweC5cbiAgICAgKiBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFsaXR5XG4gICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgYXN5bmMgZ2V0RmxhZyhjb2RlLCB3aWR0aCwgaGVpZ2h0LCBxdWFsaXR5KSB7XG4gICAgICAgIGNvbnN0IGFwaVBhdGggPSAnL2F2YXRhcnMvZmxhZ3Mve2NvZGV9Jy5yZXBsYWNlKCd7Y29kZX0nLCBjb2RlKTtcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb2RlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2RlXCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3dpZHRoJ10gPSB3aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGF5bG9hZFsnaGVpZ2h0J10gPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHF1YWxpdHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWydxdWFsaXR5J10gPSBxdWFsaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoJ2dldCcsIGFwaVBhdGgsIHtcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sIHBheWxvYWQsICdhcnJheWJ1ZmZlcicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbWFnZSBmcm9tIFVSTFxuICAgICAqXG4gICAgICogVXNlIHRoaXMgZW5kcG9pbnQgdG8gZmV0Y2ggYSByZW1vdGUgaW1hZ2UgVVJMIGFuZCBjcm9wIGl0IHRvIGFueSBpbWFnZSBzaXplXG4gICAgICogeW91IHdhbnQuIFRoaXMgZW5kcG9pbnQgaXMgdmVyeSB1c2VmdWwgaWYgeW91IG5lZWQgdG8gY3JvcCBhbmQgZGlzcGxheVxuICAgICAqIHJlbW90ZSBpbWFnZXMgaW4geW91ciBhcHAgb3IgaW4gY2FzZSB5b3Ugd2FudCB0byBtYWtlIHN1cmUgYSAzcmQgcGFydHlcbiAgICAgKiBpbWFnZSBpcyBwcm9wZXJseSBzZXJ2ZWQgdXNpbmcgYSBUTFMgcHJvdG9jb2wuXG4gICAgICogXG4gICAgICogV2hlbiBvbmUgZGltZW5zaW9uIGlzIHNwZWNpZmllZCBhbmQgdGhlIG90aGVyIGlzIDAsIHRoZSBpbWFnZSBpcyBzY2FsZWRcbiAgICAgKiB3aXRoIHByZXNlcnZlZCBhc3BlY3QgcmF0aW8uIElmIGJvdGggZGltZW5zaW9ucyBhcmUgMCwgdGhlIEFQSSBwcm92aWRlcyBhblxuICAgICAqIGltYWdlIGF0IHNvdXJjZSBxdWFsaXR5LiBJZiBkaW1lbnNpb25zIGFyZSBub3Qgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBzaXplXG4gICAgICogb2YgaW1hZ2UgcmV0dXJuZWQgaXMgNDAweDQwMHB4LlxuICAgICAqIFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRJbWFnZSh1cmwsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3QgYXBpUGF0aCA9ICcvYXZhdGFycy9pbWFnZSc7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgdXJsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJ1cmxcIicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3VybCddID0gdXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3dpZHRoJ10gPSB3aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGF5bG9hZFsnaGVpZ2h0J10gPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbCgnZ2V0JywgYXBpUGF0aCwge1xuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSwgcGF5bG9hZCwgJ2FycmF5YnVmZmVyJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHVzZXIgaW5pdGlhbHNcbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGVuZHBvaW50IHRvIHNob3cgeW91ciB1c2VyIGluaXRpYWxzIGF2YXRhciBpY29uIG9uIHlvdXIgd2Vic2l0ZSBvclxuICAgICAqIGFwcC4gQnkgZGVmYXVsdCwgdGhpcyByb3V0ZSB3aWxsIHRyeSB0byBwcmludCB5b3VyIGxvZ2dlZC1pbiB1c2VyIG5hbWUgb3JcbiAgICAgKiBlbWFpbCBpbml0aWFscy4gWW91IGNhbiBhbHNvIG92ZXJ3cml0ZSB0aGUgdXNlciBuYW1lIGlmIHlvdSBwYXNzIHRoZSAnbmFtZSdcbiAgICAgKiBwYXJhbWV0ZXIuIElmIG5vIG5hbWUgaXMgZ2l2ZW4gYW5kIG5vIHVzZXIgaXMgbG9nZ2VkLCBhbiBlbXB0eSBhdmF0YXIgd2lsbFxuICAgICAqIGJlIHJldHVybmVkLlxuICAgICAqIFxuICAgICAqIFlvdSBjYW4gdXNlIHRoZSBjb2xvciBhbmQgYmFja2dyb3VuZCBwYXJhbXMgdG8gY2hhbmdlIHRoZSBhdmF0YXIgY29sb3JzLiBCeVxuICAgICAqIGRlZmF1bHQsIGEgcmFuZG9tIHRoZW1lIHdpbGwgYmUgc2VsZWN0ZWQuIFRoZSByYW5kb20gdGhlbWUgd2lsbCBwZXJzaXN0IGZvclxuICAgICAqIHRoZSB1c2VyJ3MgaW5pdGlhbHMgd2hlbiByZWxvYWRpbmcgdGhlIHNhbWUgdGhlbWUgd2lsbCBhbHdheXMgcmV0dXJuIGZvclxuICAgICAqIHRoZSBzYW1lIGluaXRpYWxzLlxuICAgICAqIFxuICAgICAqIFdoZW4gb25lIGRpbWVuc2lvbiBpcyBzcGVjaWZpZWQgYW5kIHRoZSBvdGhlciBpcyAwLCB0aGUgaW1hZ2UgaXMgc2NhbGVkXG4gICAgICogd2l0aCBwcmVzZXJ2ZWQgYXNwZWN0IHJhdGlvLiBJZiBib3RoIGRpbWVuc2lvbnMgYXJlIDAsIHRoZSBBUEkgcHJvdmlkZXMgYW5cbiAgICAgKiBpbWFnZSBhdCBzb3VyY2UgcXVhbGl0eS4gSWYgZGltZW5zaW9ucyBhcmUgbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgc2l6ZVxuICAgICAqIG9mIGltYWdlIHJldHVybmVkIGlzIDEwMHgxMDBweC5cbiAgICAgKiBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kXG4gICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgYXN5bmMgZ2V0SW5pdGlhbHMobmFtZSwgd2lkdGgsIGhlaWdodCwgYmFja2dyb3VuZCkge1xuICAgICAgICBjb25zdCBhcGlQYXRoID0gJy9hdmF0YXJzL2luaXRpYWxzJztcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7fTtcblxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWyduYW1lJ10gPSBuYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3dpZHRoJ10gPSB3aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGF5bG9hZFsnaGVpZ2h0J10gPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGJhY2tncm91bmQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWydiYWNrZ3JvdW5kJ10gPSBiYWNrZ3JvdW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoJ2dldCcsIGFwaVBhdGgsIHtcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sIHBheWxvYWQsICdhcnJheWJ1ZmZlcicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBRUiBjb2RlXG4gICAgICpcbiAgICAgKiBDb252ZXJ0cyBhIGdpdmVuIHBsYWluIHRleHQgdG8gYSBRUiBjb2RlIGltYWdlLiBZb3UgY2FuIHVzZSB0aGUgcXVlcnlcbiAgICAgKiBwYXJhbWV0ZXJzIHRvIGNoYW5nZSB0aGUgc2l6ZSBhbmQgc3R5bGUgb2YgdGhlIHJlc3VsdGluZyBpbWFnZS5cbiAgICAgKiBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWFyZ2luXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkb3dubG9hZFxuICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIGFzeW5jIGdldFFSKHRleHQsIHNpemUsIG1hcmdpbiwgZG93bmxvYWQpIHtcbiAgICAgICAgY29uc3QgYXBpUGF0aCA9ICcvYXZhdGFycy9xcic7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwidGV4dFwiJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0eXBlb2YgdGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3RleHQnXSA9IHRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHNpemUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWydzaXplJ10gPSBzaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtYXJnaW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWydtYXJnaW4nXSA9IG1hcmdpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZG93bmxvYWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWydkb3dubG9hZCddID0gZG93bmxvYWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbCgnZ2V0JywgYXBpUGF0aCwge1xuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSwgcGF5bG9hZCwgJ2FycmF5YnVmZmVyJyk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF2YXRhcnM7XG4iXSwibmFtZXMiOlsiU2VydmljZSIsInJlcXVpcmUiLCJBcHB3cml0ZUV4Y2VwdGlvbiIsIklucHV0RmlsZSIsImNsaWVudCIsIlN0cmVhbSIsInByb21pc2lmeSIsImZzIiwiQXZhdGFycyIsImNvbnN0cnVjdG9yIiwiZ2V0QnJvd3NlciIsImNvZGUiLCJ3aWR0aCIsImhlaWdodCIsInF1YWxpdHkiLCJhcGlQYXRoIiwicmVwbGFjZSIsInBheWxvYWQiLCJjYWxsIiwiZ2V0Q3JlZGl0Q2FyZCIsImdldEZhdmljb24iLCJ1cmwiLCJnZXRGbGFnIiwiZ2V0SW1hZ2UiLCJnZXRJbml0aWFscyIsIm5hbWUiLCJiYWNrZ3JvdW5kIiwiZ2V0UVIiLCJ0ZXh0Iiwic2l6ZSIsIm1hcmdpbiIsImRvd25sb2FkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/avatars.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/databases.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/databases.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Databases extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * List databases\n     *\n     * Get a list of all databases from the current Appwrite project. You can use\n     * the search parameter to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async list(queries, search) {\n        const apiPath = \"/databases\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create database\n     *\n     * Create a new Database.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async create(databaseId, name, enabled) {\n        const apiPath = \"/databases\";\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof databaseId !== \"undefined\") {\n            payload[\"databaseId\"] = databaseId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get database\n     *\n     * Get a database by its unique ID. This endpoint response returns a JSON\n     * object with the database metadata.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async get(databaseId) {\n        const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update database\n     *\n     * Update a database by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async update(databaseId, name, enabled) {\n        const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete database\n     *\n     * Delete a database by its unique ID. Only API keys with with databases.write\n     * scope can delete a database.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async delete(databaseId) {\n        const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List collections\n     *\n     * Get a list of all collections that belong to the provided databaseId. You\n     * can use the search parameter to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listCollections(databaseId, queries, search) {\n        const apiPath = \"/databases/{databaseId}/collections\".replace(\"{databaseId}\", databaseId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create collection\n     *\n     * Create a new Collection. Before using this route, you should create a new\n     * database resource using either a [server\n     * integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        const apiPath = \"/databases/{databaseId}/collections\".replace(\"{databaseId}\", databaseId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof collectionId !== \"undefined\") {\n            payload[\"collectionId\"] = collectionId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof documentSecurity !== \"undefined\") {\n            payload[\"documentSecurity\"] = documentSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get collection\n     *\n     * Get a collection by its unique ID. This endpoint response returns a JSON\n     * object with the collection metadata.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getCollection(databaseId, collectionId) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update collection\n     *\n     * Update a collection by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof documentSecurity !== \"undefined\") {\n            payload[\"documentSecurity\"] = documentSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete collection\n     *\n     * Delete a collection by its unique ID. Only users with write permissions\n     * have access to delete this resource.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteCollection(databaseId, collectionId) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List attributes\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listAttributes(databaseId, collectionId, queries) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create boolean attribute\n     *\n     * Create a boolean attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createBooleanAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/boolean\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update boolean attribute\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateBooleanAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create datetime attribute\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createDatetimeAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/datetime\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update dateTime attribute\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateDatetimeAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create email attribute\n     *\n     * Create an email attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createEmailAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/email\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update email attribute\n     *\n     * Update an email attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateEmailAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create enum attribute\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/enum\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof elements !== \"undefined\") {\n            payload[\"elements\"] = elements;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update enum attribute\n     *\n     * Update an enum attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateEnumAttribute(databaseId, collectionId, key, elements, required, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof elements !== \"undefined\") {\n            payload[\"elements\"] = elements;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create float attribute\n     *\n     * Create a float attribute. Optionally, minimum and maximum values can be\n     * provided.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/float\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update float attribute\n     *\n     * Update a float attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof min === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n        if (typeof max === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create integer attribute\n     *\n     * Create an integer attribute. Optionally, minimum and maximum values can be\n     * provided.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/integer\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update integer attribute\n     *\n     * Update an integer attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof min === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n        if (typeof max === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create IP address attribute\n     *\n     * Create IP address attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createIpAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/ip\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update IP address attribute\n     *\n     * Update an ip attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateIpAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create relationship attribute\n     *\n     * Create relationship attribute. [Learn more about relationship\n     * attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} relatedCollectionId\n     * @param {string} type\n     * @param {boolean} twoWay\n     * @param {string} key\n     * @param {string} twoWayKey\n     * @param {string} onDelete\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createRelationshipAttribute(databaseId, collectionId, relatedCollectionId, type, twoWay, key, twoWayKey, onDelete) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/relationship\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof relatedCollectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"relatedCollectionId\"');\n        }\n        if (typeof type === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof relatedCollectionId !== \"undefined\") {\n            payload[\"relatedCollectionId\"] = relatedCollectionId;\n        }\n        if (typeof type !== \"undefined\") {\n            payload[\"type\"] = type;\n        }\n        if (typeof twoWay !== \"undefined\") {\n            payload[\"twoWay\"] = twoWay;\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof twoWayKey !== \"undefined\") {\n            payload[\"twoWayKey\"] = twoWayKey;\n        }\n        if (typeof onDelete !== \"undefined\") {\n            payload[\"onDelete\"] = onDelete;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create string attribute\n     *\n     * Create a string attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {number} size\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @param {boolean} encrypt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createStringAttribute(databaseId, collectionId, key, size, required, xdefault, array, encrypt) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/string\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof size === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"size\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof size !== \"undefined\") {\n            payload[\"size\"] = size;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        if (typeof encrypt !== \"undefined\") {\n            payload[\"encrypt\"] = encrypt;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update string attribute\n     *\n     * Update a string attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateStringAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create URL attribute\n     *\n     * Create a URL attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createUrlAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/url\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update URL attribute\n     *\n     * Update an url attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateUrlAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get attribute\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getAttribute(databaseId, collectionId, key) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete attribute\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteAttribute(databaseId, collectionId, key) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update relationship attribute\n     *\n     * Update relationship attribute. [Learn more about relationship\n     * attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string} onDelete\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateRelationshipAttribute(databaseId, collectionId, key, onDelete) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof onDelete !== \"undefined\") {\n            payload[\"onDelete\"] = onDelete;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List documents\n     *\n     * Get a list of all the user's documents in a given collection. You can use\n     * the query params to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listDocuments(databaseId, collectionId, queries) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create document\n     *\n     * Create a new Document. Before using this route, you should create a new\n     * collection resource using either a [server\n     * integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {object} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createDocument(databaseId, collectionId, documentId, data, permissions) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof data === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n        if (typeof documentId !== \"undefined\") {\n            payload[\"documentId\"] = documentId;\n        }\n        if (typeof data !== \"undefined\") {\n            payload[\"data\"] = data;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get document\n     *\n     * Get a document by its unique ID. This endpoint response returns a JSON\n     * object with the document data.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getDocument(databaseId, collectionId, documentId, queries) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update document\n     *\n     * Update a document by its unique ID. Using the patch method you can pass\n     * only specific fields that will get updated.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {object} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateDocument(databaseId, collectionId, documentId, data, permissions) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof data !== \"undefined\") {\n            payload[\"data\"] = data;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete document\n     *\n     * Delete a document by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteDocument(databaseId, collectionId, documentId) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List indexes\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listIndexes(databaseId, collectionId, queries) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create index\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string} type\n     * @param {string[]} attributes\n     * @param {string[]} orders\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createIndex(databaseId, collectionId, key, type, attributes, orders) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof type === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof attributes === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"attributes\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof type !== \"undefined\") {\n            payload[\"type\"] = type;\n        }\n        if (typeof attributes !== \"undefined\") {\n            payload[\"attributes\"] = attributes;\n        }\n        if (typeof orders !== \"undefined\") {\n            payload[\"orders\"] = orders;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get index\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getIndex(databaseId, collectionId, key) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete index\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteIndex(databaseId, collectionId, key) {\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        let payload = {};\n        if (typeof databaseId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Databases;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/databases.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/functions.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/functions.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Functions extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * List functions\n     *\n     * Get a list of all the project's functions. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async list(queries, search) {\n        const apiPath = \"/functions\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create function\n     *\n     * Create a new function. You can pass a list of\n     * [permissions](https://appwrite.io/docs/permissions) to allow different\n     * project users or team with access to execute the function using the client\n     * API.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {string} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @param {string} templateRepository\n     * @param {string} templateOwner\n     * @param {string} templateRootDirectory\n     * @param {string} templateBranch\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async create(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, templateRepository, templateOwner, templateRootDirectory, templateBranch) {\n        const apiPath = \"/functions\";\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof runtime === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"runtime\"');\n        }\n        if (typeof functionId !== \"undefined\") {\n            payload[\"functionId\"] = functionId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof runtime !== \"undefined\") {\n            payload[\"runtime\"] = runtime;\n        }\n        if (typeof execute !== \"undefined\") {\n            payload[\"execute\"] = execute;\n        }\n        if (typeof events !== \"undefined\") {\n            payload[\"events\"] = events;\n        }\n        if (typeof schedule !== \"undefined\") {\n            payload[\"schedule\"] = schedule;\n        }\n        if (typeof timeout !== \"undefined\") {\n            payload[\"timeout\"] = timeout;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof logging !== \"undefined\") {\n            payload[\"logging\"] = logging;\n        }\n        if (typeof entrypoint !== \"undefined\") {\n            payload[\"entrypoint\"] = entrypoint;\n        }\n        if (typeof commands !== \"undefined\") {\n            payload[\"commands\"] = commands;\n        }\n        if (typeof installationId !== \"undefined\") {\n            payload[\"installationId\"] = installationId;\n        }\n        if (typeof providerRepositoryId !== \"undefined\") {\n            payload[\"providerRepositoryId\"] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== \"undefined\") {\n            payload[\"providerBranch\"] = providerBranch;\n        }\n        if (typeof providerSilentMode !== \"undefined\") {\n            payload[\"providerSilentMode\"] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== \"undefined\") {\n            payload[\"providerRootDirectory\"] = providerRootDirectory;\n        }\n        if (typeof templateRepository !== \"undefined\") {\n            payload[\"templateRepository\"] = templateRepository;\n        }\n        if (typeof templateOwner !== \"undefined\") {\n            payload[\"templateOwner\"] = templateOwner;\n        }\n        if (typeof templateRootDirectory !== \"undefined\") {\n            payload[\"templateRootDirectory\"] = templateRootDirectory;\n        }\n        if (typeof templateBranch !== \"undefined\") {\n            payload[\"templateBranch\"] = templateBranch;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List runtimes\n     *\n     * Get a list of all runtimes that are currently active on your instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listRuntimes() {\n        const apiPath = \"/functions/runtimes\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get function\n     *\n     * Get a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async get(functionId) {\n        const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update function\n     *\n     * Update function by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {string} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async update(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory) {\n        const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof runtime !== \"undefined\") {\n            payload[\"runtime\"] = runtime;\n        }\n        if (typeof execute !== \"undefined\") {\n            payload[\"execute\"] = execute;\n        }\n        if (typeof events !== \"undefined\") {\n            payload[\"events\"] = events;\n        }\n        if (typeof schedule !== \"undefined\") {\n            payload[\"schedule\"] = schedule;\n        }\n        if (typeof timeout !== \"undefined\") {\n            payload[\"timeout\"] = timeout;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof logging !== \"undefined\") {\n            payload[\"logging\"] = logging;\n        }\n        if (typeof entrypoint !== \"undefined\") {\n            payload[\"entrypoint\"] = entrypoint;\n        }\n        if (typeof commands !== \"undefined\") {\n            payload[\"commands\"] = commands;\n        }\n        if (typeof installationId !== \"undefined\") {\n            payload[\"installationId\"] = installationId;\n        }\n        if (typeof providerRepositoryId !== \"undefined\") {\n            payload[\"providerRepositoryId\"] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== \"undefined\") {\n            payload[\"providerBranch\"] = providerBranch;\n        }\n        if (typeof providerSilentMode !== \"undefined\") {\n            payload[\"providerSilentMode\"] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== \"undefined\") {\n            payload[\"providerRootDirectory\"] = providerRootDirectory;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete function\n     *\n     * Delete a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async delete(functionId) {\n        const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List deployments\n     *\n     * Get a list of all the project's code deployments. You can use the query\n     * params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listDeployments(functionId, queries, search) {\n        const apiPath = \"/functions/{functionId}/deployments\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create deployment\n     *\n     * Create a new function code deployment. Use this endpoint to upload a new\n     * version of your code function. To execute your newly uploaded code, you'll\n     * need to update the function's deployment to use your new deployment UID.\n     * \n     * This endpoint accepts a tar.gz file compressed with your code. Make sure to\n     * include any dependencies your code has within the compressed file. You can\n     * learn more about code packaging in the [Appwrite Cloud Functions\n     * tutorial](https://appwrite.io/docs/functions).\n     * \n     * Use the \"command\" param to set the entrypoint used to execute your code.\n     *\n     * @param {string} functionId\n     * @param {InputFile} code\n     * @param {boolean} activate\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createDeployment(functionId, code, activate, entrypoint, commands, onProgress = ()=>{}) {\n        const apiPath = \"/functions/{functionId}/deployments\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof code === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof activate === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"activate\"');\n        }\n        if (typeof entrypoint !== \"undefined\") {\n            payload[\"entrypoint\"] = entrypoint;\n        }\n        if (typeof commands !== \"undefined\") {\n            payload[\"commands\"] = commands;\n        }\n        if (typeof code !== \"undefined\") {\n            payload[\"code\"] = code;\n        }\n        if (typeof activate !== \"undefined\") {\n            payload[\"activate\"] = activate.toString();\n        }\n        const size = code.size;\n        const apiHeaders = {\n            \"content-type\": \"multipart/form-data\"\n        };\n        let id = undefined;\n        let response = undefined;\n        let chunksUploaded = 0;\n        let currentChunk = Buffer.from(\"\");\n        let currentChunkSize = 0;\n        let currentChunkStart = 0;\n        const selfClient = this.client;\n        async function uploadChunk(lastUpload = false) {\n            if (chunksUploaded - 1 >= currentChunkStart / client.CHUNK_SIZE) {\n                return;\n            }\n            const start = currentChunkStart;\n            const end = currentChunkStart + currentChunkSize - 1;\n            if (!lastUpload || currentChunkStart !== 0) {\n                apiHeaders[\"content-range\"] = \"bytes \" + start + \"-\" + end + \"/\" + size;\n            }\n            if (id) {\n                apiHeaders[\"x-appwrite-id\"] = id;\n            }\n            payload[\"code\"] = {\n                type: \"file\",\n                file: currentChunk,\n                filename: code.filename,\n                size: currentChunkSize\n            };\n            response = await selfClient.call(\"post\", apiPath, apiHeaders, payload);\n            if (!id) {\n                id = response[\"$id\"];\n            }\n            if (onProgress !== null) {\n                onProgress({\n                    $id: response[\"$id\"],\n                    progress: Math.min((start + client.CHUNK_SIZE) * client.CHUNK_SIZE, size) / size * 100,\n                    sizeUploaded: end + 1,\n                    chunksTotal: response[\"chunksTotal\"],\n                    chunksUploaded: response[\"chunksUploaded\"]\n                });\n            }\n            currentChunkStart += client.CHUNK_SIZE;\n        }\n        return await new Promise((resolve, reject)=>{\n            const writeStream = new Stream.Writable();\n            writeStream._write = async (mainChunk, encoding, callback)=>{\n                try {\n                    // Segment incoming chunk into up to 5MB chunks\n                    const mainChunkSize = Buffer.byteLength(mainChunk);\n                    const chunksCount = Math.ceil(mainChunkSize / client.CHUNK_SIZE);\n                    const chunks = [];\n                    for(let i = 0; i < chunksCount; i++){\n                        const chunk = mainChunk.slice(i * client.CHUNK_SIZE, (i + 1) * client.CHUNK_SIZE);\n                        chunks.push(chunk);\n                    }\n                    for (const chunk of chunks){\n                        const chunkSize = Buffer.byteLength(chunk);\n                        if (chunkSize + currentChunkSize == client.CHUNK_SIZE) {\n                            // Upload chunk\n                            currentChunk = Buffer.concat([\n                                currentChunk,\n                                chunk\n                            ]);\n                            currentChunkSize = Buffer.byteLength(currentChunk);\n                            await uploadChunk();\n                            currentChunk = Buffer.from(\"\");\n                            currentChunkSize = 0;\n                        } else if (chunkSize + currentChunkSize > client.CHUNK_SIZE) {\n                            // Upload chunk, put rest into next chunk\n                            const bytesToUpload = client.CHUNK_SIZE - currentChunkSize;\n                            const newChunkSection = chunk.slice(0, bytesToUpload);\n                            currentChunk = Buffer.concat([\n                                currentChunk,\n                                newChunkSection\n                            ]);\n                            currentChunkSize = Buffer.byteLength(currentChunk);\n                            await uploadChunk();\n                            currentChunk = chunk.slice(bytesToUpload, undefined);\n                            currentChunkSize = chunkSize - bytesToUpload;\n                        } else {\n                            // Append into current chunk\n                            currentChunk = Buffer.concat([\n                                currentChunk,\n                                chunk\n                            ]);\n                            currentChunkSize = chunkSize + currentChunkSize;\n                        }\n                    }\n                    callback();\n                } catch (e) {\n                    callback(e);\n                }\n            };\n            writeStream.on(\"finish\", async ()=>{\n                if (currentChunkSize > 0) {\n                    try {\n                        await uploadChunk(true);\n                    } catch (e) {\n                        reject(e);\n                    }\n                }\n                resolve(response);\n            });\n            writeStream.on(\"error\", (err)=>{\n                reject(err);\n            });\n            code.stream.pipe(writeStream);\n        });\n    }\n    /**\n     * Get deployment\n     *\n     * Get a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getDeployment(functionId, deploymentId) {\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update function deployment\n     *\n     * Update the function code deployment ID using the unique function ID. Use\n     * this endpoint to switch the code deployment that should be executed by the\n     * execution endpoint.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateDeployment(functionId, deploymentId) {\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete deployment\n     *\n     * Delete a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteDeployment(functionId, deploymentId) {\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create build\n     *\n     * Create a new build for an Appwrite Function deployment. This endpoint can\n     * be used to retry a failed build.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @param {string} buildId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createBuild(functionId, deploymentId, buildId) {\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}/builds/{buildId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId).replace(\"{buildId}\", buildId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        if (typeof buildId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"buildId\"');\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Download Deployment\n     *\n     * Get a Deployment's contents by its unique ID. This endpoint supports range\n     * requests for partial or streaming file download.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async downloadDeployment(functionId, deploymentId) {\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}/download\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * List executions\n     *\n     * Get a list of all the current user function execution logs. You can use the\n     * query params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listExecutions(functionId, queries, search) {\n        const apiPath = \"/functions/{functionId}/executions\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create execution\n     *\n     * Trigger a function execution. The returned object will return you the\n     * current execution status. You can ping the `Get Execution` endpoint to get\n     * updates on the current execution status. Once this endpoint is called, your\n     * function execution process will start asynchronously.\n     *\n     * @param {string} functionId\n     * @param {string} body\n     * @param {boolean} async\n     * @param {string} xpath\n     * @param {string} method\n     * @param {object} headers\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createExecution(functionId, body, async, xpath, method, headers) {\n        const apiPath = \"/functions/{functionId}/executions\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof body !== \"undefined\") {\n            payload[\"body\"] = body;\n        }\n        if (typeof async !== \"undefined\") {\n            payload[\"async\"] = async;\n        }\n        if (typeof xpath !== \"undefined\") {\n            payload[\"path\"] = xpath;\n        }\n        if (typeof method !== \"undefined\") {\n            payload[\"method\"] = method;\n        }\n        if (typeof headers !== \"undefined\") {\n            payload[\"headers\"] = headers;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get execution\n     *\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} executionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getExecution(functionId, executionId) {\n        const apiPath = \"/functions/{functionId}/executions/{executionId}\".replace(\"{functionId}\", functionId).replace(\"{executionId}\", executionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof executionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List variables\n     *\n     * Get a list of all variables of a specific function.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listVariables(functionId) {\n        const apiPath = \"/functions/{functionId}/variables\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create variable\n     *\n     * Create a new function environment variable. These variables can be accessed\n     * in the function at runtime as environment variables.\n     *\n     * @param {string} functionId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createVariable(functionId, key, value) {\n        const apiPath = \"/functions/{functionId}/variables\".replace(\"{functionId}\", functionId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof value === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"value\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof value !== \"undefined\") {\n            payload[\"value\"] = value;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get variable\n     *\n     * Get a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getVariable(functionId, variableId) {\n        const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update variable\n     *\n     * Update variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateVariable(functionId, variableId, key, value) {\n        const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof value !== \"undefined\") {\n            payload[\"value\"] = value;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete variable\n     *\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteVariable(functionId, variableId) {\n        const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n        let payload = {};\n        if (typeof functionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Functions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/graphql.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/graphql.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Graphql extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async query(query) {\n        const apiPath = \"/graphql\";\n        let payload = {};\n        if (typeof query === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n        if (typeof query !== \"undefined\") {\n            payload[\"query\"] = query;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"x-sdk-graphql\": \"true\",\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async mutation(query) {\n        const apiPath = \"/graphql/mutation\";\n        let payload = {};\n        if (typeof query === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n        if (typeof query !== \"undefined\") {\n            payload[\"query\"] = query;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"x-sdk-graphql\": \"true\",\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Graphql;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvc2VydmljZXMvZ3JhcGhxbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1HLFNBQVNILG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1JLFNBQVNKLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU0sRUFBRUssU0FBUyxFQUFFLEdBQUdMLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1NLEtBQUtOLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1PLGdCQUFnQlI7SUFFakJTLFlBQVlMLE1BQU0sQ0FDbEI7UUFDRyxLQUFLLENBQUNBO0lBQ1Q7SUFHRDs7Ozs7Ozs7S0FRQyxHQUNELE1BQU1NLE1BQU1BLEtBQUssRUFBRTtRQUNmLE1BQU1DLFVBQVU7UUFDaEIsSUFBSUMsVUFBVSxDQUFDO1FBQ2YsSUFBSSxPQUFPRixVQUFVLGFBQWE7WUFDOUIsTUFBTSxJQUFJUixrQkFBa0I7UUFDaEM7UUFHQSxJQUFJLE9BQU9RLFVBQVUsYUFBYTtZQUM5QkUsT0FBTyxDQUFDLFFBQVEsR0FBR0Y7UUFDdkI7UUFFQSxPQUFPLE1BQU0sSUFBSSxDQUFDTixNQUFNLENBQUNTLElBQUksQ0FBQyxRQUFRRixTQUFTO1lBQzNDLGlCQUFpQjtZQUNqQixnQkFBZ0I7UUFDcEIsR0FBR0M7SUFDUDtJQUVBOzs7Ozs7OztLQVFDLEdBQ0QsTUFBTUUsU0FBU0osS0FBSyxFQUFFO1FBQ2xCLE1BQU1DLFVBQVU7UUFDaEIsSUFBSUMsVUFBVSxDQUFDO1FBQ2YsSUFBSSxPQUFPRixVQUFVLGFBQWE7WUFDOUIsTUFBTSxJQUFJUixrQkFBa0I7UUFDaEM7UUFHQSxJQUFJLE9BQU9RLFVBQVUsYUFBYTtZQUM5QkUsT0FBTyxDQUFDLFFBQVEsR0FBR0Y7UUFDdkI7UUFFQSxPQUFPLE1BQU0sSUFBSSxDQUFDTixNQUFNLENBQUNTLElBQUksQ0FBQyxRQUFRRixTQUFTO1lBQzNDLGlCQUFpQjtZQUNqQixnQkFBZ0I7UUFDcEIsR0FBR0M7SUFDUDtBQUNKO0FBRUFHLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9zZXJ2aWNlcy9ncmFwaHFsLmpzPzIzNjEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2UuanMnKTtcbmNvbnN0IEFwcHdyaXRlRXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uLmpzJyk7XG5jb25zdCBJbnB1dEZpbGUgPSByZXF1aXJlKCcuLi9pbnB1dEZpbGUuanMnKTtcbmNvbnN0IGNsaWVudCA9IHJlcXVpcmUoJy4uL2NsaWVudC5qcycpO1xuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCB7IHByb21pc2lmeSB9ID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jbGFzcyBHcmFwaHFsIGV4dGVuZHMgU2VydmljZSB7XG5cbiAgICAgY29uc3RydWN0b3IoY2xpZW50KVxuICAgICB7XG4gICAgICAgIHN1cGVyKGNsaWVudCk7XG4gICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR3JhcGhRTCBlbmRwb2ludFxuICAgICAqXG4gICAgICogRXhlY3V0ZSBhIEdyYXBoUUwgbXV0YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcXVlcnlcbiAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBhc3luYyBxdWVyeShxdWVyeSkge1xuICAgICAgICBjb25zdCBhcGlQYXRoID0gJy9ncmFwaHFsJztcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicXVlcnlcIicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGF5bG9hZFsncXVlcnknXSA9IHF1ZXJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoJ3Bvc3QnLCBhcGlQYXRoLCB7XG4gICAgICAgICAgICAneC1zZGstZ3JhcGhxbCc6ICd0cnVlJyxcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sIHBheWxvYWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYXBoUUwgZW5kcG9pbnRcbiAgICAgKlxuICAgICAqIEV4ZWN1dGUgYSBHcmFwaFFMIG11dGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5XG4gICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgYXN5bmMgbXV0YXRpb24ocXVlcnkpIHtcbiAgICAgICAgY29uc3QgYXBpUGF0aCA9ICcvZ3JhcGhxbC9tdXRhdGlvbic7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInF1ZXJ5XCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3F1ZXJ5J10gPSBxdWVyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKCdwb3N0JywgYXBpUGF0aCwge1xuICAgICAgICAgICAgJ3gtc2RrLWdyYXBocWwnOiAndHJ1ZScsXG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LCBwYXlsb2FkKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGhxbDtcbiJdLCJuYW1lcyI6WyJTZXJ2aWNlIiwicmVxdWlyZSIsIkFwcHdyaXRlRXhjZXB0aW9uIiwiSW5wdXRGaWxlIiwiY2xpZW50IiwiU3RyZWFtIiwicHJvbWlzaWZ5IiwiZnMiLCJHcmFwaHFsIiwiY29uc3RydWN0b3IiLCJxdWVyeSIsImFwaVBhdGgiLCJwYXlsb2FkIiwiY2FsbCIsIm11dGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/graphql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/health.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/health.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Health extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * Get HTTP\n     *\n     * Check the Appwrite HTTP server is up and responsive.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async get() {\n        const apiPath = \"/health\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get antivirus\n     *\n     * Check the Appwrite Antivirus server is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getAntivirus() {\n        const apiPath = \"/health/anti-virus\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get cache\n     *\n     * Check the Appwrite in-memory cache servers are up and connection is\n     * successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getCache() {\n        const apiPath = \"/health/cache\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get DB\n     *\n     * Check the Appwrite database servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getDB() {\n        const apiPath = \"/health/db\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get pubsub\n     *\n     * Check the Appwrite pub-sub servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getPubSub() {\n        const apiPath = \"/health/pubsub\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get queue\n     *\n     * Check the Appwrite queue messaging servers are up and connection is\n     * successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueue() {\n        const apiPath = \"/health/queue\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get builds queue\n     *\n     * Get the number of builds that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueBuilds(threshold) {\n        const apiPath = \"/health/queue/builds\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get certificates queue\n     *\n     * Get the number of certificates that are waiting to be issued against\n     * [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue\n     * server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueCertificates(threshold) {\n        const apiPath = \"/health/queue/certificates\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get databases queue\n     *\n     * Get the number of database changes that are waiting to be processed in the\n     * Appwrite internal queue server.\n     *\n     * @param {string} name\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueDatabases(name, threshold) {\n        const apiPath = \"/health/queue/databases\";\n        let payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get deletes queue\n     *\n     * Get the number of background destructive changes that are waiting to be\n     * processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueDeletes(threshold) {\n        const apiPath = \"/health/queue/deletes\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get functions queue\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueFunctions(threshold) {\n        const apiPath = \"/health/queue/functions\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get logs queue\n     *\n     * Get the number of logs that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueLogs(threshold) {\n        const apiPath = \"/health/queue/logs\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get mails queue\n     *\n     * Get the number of mails that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueMails(threshold) {\n        const apiPath = \"/health/queue/mails\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get messaging queue\n     *\n     * Get the number of messages that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueMessaging(threshold) {\n        const apiPath = \"/health/queue/messaging\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get migrations queue\n     *\n     * Get the number of migrations that are waiting to be processed in the\n     * Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueMigrations(threshold) {\n        const apiPath = \"/health/queue/migrations\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get webhooks queue\n     *\n     * Get the number of webhooks that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getQueueWebhooks(threshold) {\n        const apiPath = \"/health/queue/webhooks\";\n        let payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get local storage\n     *\n     * Check the Appwrite local storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getStorageLocal() {\n        const apiPath = \"/health/storage/local\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get time\n     *\n     * Check the Appwrite server time is synced with Google remote NTP server. We\n     * use this technology to smoothly handle leap seconds with no disruptive\n     * events. The [Network Time\n     * Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is\n     * used by hundreds of millions of computers and devices to synchronize their\n     * clocks over the Internet. If your computer sets its own clock, it likely\n     * uses NTP.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getTime() {\n        const apiPath = \"/health/time\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Health;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/health.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/locale.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/locale.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Locale extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * Get user locale\n     *\n     * Get the current user location based on IP. Returns an object with user\n     * country code, country name, continent name, continent code, ip address and\n     * suggested currency. You can use the locale header to get the data in a\n     * supported language.\n     * \n     * ([IP Geolocation by DB-IP](https://db-ip.com))\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async get() {\n        const apiPath = \"/locale\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List Locale Codes\n     *\n     * List of all locale codes in [ISO\n     * 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listCodes() {\n        const apiPath = \"/locale/codes\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List continents\n     *\n     * List of all continents. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listContinents() {\n        const apiPath = \"/locale/continents\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List countries\n     *\n     * List of all countries. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listCountries() {\n        const apiPath = \"/locale/countries\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List EU countries\n     *\n     * List of all countries that are currently members of the EU. You can use the\n     * locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listCountriesEU() {\n        const apiPath = \"/locale/countries/eu\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List countries phone codes\n     *\n     * List of all countries phone codes. You can use the locale header to get the\n     * data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listCountriesPhones() {\n        const apiPath = \"/locale/countries/phones\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List currencies\n     *\n     * List of all currencies, including currency symbol, name, plural, and\n     * decimal digits for all major and minor currencies. You can use the locale\n     * header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listCurrencies() {\n        const apiPath = \"/locale/currencies\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List languages\n     *\n     * List of all languages classified by ISO 639-1 including 2-letter code, name\n     * in English, and name in the respective language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listLanguages() {\n        const apiPath = \"/locale/languages\";\n        let payload = {};\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Locale;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/storage.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/storage.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Storage extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * List buckets\n     *\n     * Get a list of all the storage buckets. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listBuckets(queries, search) {\n        const apiPath = \"/storage/buckets\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create bucket\n     *\n     * Create a new storage bucket.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {string} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        const apiPath = \"/storage/buckets\";\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof bucketId !== \"undefined\") {\n            payload[\"bucketId\"] = bucketId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof fileSecurity !== \"undefined\") {\n            payload[\"fileSecurity\"] = fileSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof maximumFileSize !== \"undefined\") {\n            payload[\"maximumFileSize\"] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== \"undefined\") {\n            payload[\"allowedFileExtensions\"] = allowedFileExtensions;\n        }\n        if (typeof compression !== \"undefined\") {\n            payload[\"compression\"] = compression;\n        }\n        if (typeof encryption !== \"undefined\") {\n            payload[\"encryption\"] = encryption;\n        }\n        if (typeof antivirus !== \"undefined\") {\n            payload[\"antivirus\"] = antivirus;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get bucket\n     *\n     * Get a storage bucket by its unique ID. This endpoint response returns a\n     * JSON object with the storage bucket metadata.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getBucket(bucketId) {\n        const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update bucket\n     *\n     * Update a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {string} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof fileSecurity !== \"undefined\") {\n            payload[\"fileSecurity\"] = fileSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof maximumFileSize !== \"undefined\") {\n            payload[\"maximumFileSize\"] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== \"undefined\") {\n            payload[\"allowedFileExtensions\"] = allowedFileExtensions;\n        }\n        if (typeof compression !== \"undefined\") {\n            payload[\"compression\"] = compression;\n        }\n        if (typeof encryption !== \"undefined\") {\n            payload[\"encryption\"] = encryption;\n        }\n        if (typeof antivirus !== \"undefined\") {\n            payload[\"antivirus\"] = antivirus;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete bucket\n     *\n     * Delete a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteBucket(bucketId) {\n        const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List files\n     *\n     * Get a list of all the user files. You can use the query params to filter\n     * your results.\n     *\n     * @param {string} bucketId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listFiles(bucketId, queries, search) {\n        const apiPath = \"/storage/buckets/{bucketId}/files\".replace(\"{bucketId}\", bucketId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create file\n     *\n     * Create a new file. Before using this route, you should create a new bucket\n     * resource using either a [server\n     * integration](https://appwrite.io/docs/server/storage#storageCreateBucket)\n     * API or directly from your Appwrite console.\n     * \n     * Larger files should be uploaded using multiple requests with the\n     * [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range)\n     * header to send a partial request with a maximum supported chunk of `5MB`.\n     * The `content-range` header values should always be in bytes.\n     * \n     * When the first request is sent, the server will return the **File** object,\n     * and the subsequent part request must include the file's **id** in\n     * `x-appwrite-id` header to allow the server to know that the partial upload\n     * is for the existing file and not for a new one.\n     * \n     * If you're creating a new file using one of the Appwrite SDKs, all the\n     * chunking logic will be managed by the SDK internally.\n     * \n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {InputFile} file\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createFile(bucketId, fileId, file, permissions, onProgress = ()=>{}) {\n        const apiPath = \"/storage/buckets/{bucketId}/files\".replace(\"{bucketId}\", bucketId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        if (typeof file === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"file\"');\n        }\n        if (typeof fileId !== \"undefined\") {\n            payload[\"fileId\"] = fileId;\n        }\n        if (typeof file !== \"undefined\") {\n            payload[\"file\"] = file;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        const size = file.size;\n        const apiHeaders = {\n            \"content-type\": \"multipart/form-data\"\n        };\n        let id = undefined;\n        let response = undefined;\n        let chunksUploaded = 0;\n        if (fileId != \"unique()\") {\n            try {\n                response = await this.client.call(\"get\", apiPath + \"/\" + fileId, apiHeaders);\n                chunksUploaded = response.chunksUploaded;\n            } catch (e) {}\n        }\n        let currentChunk = Buffer.from(\"\");\n        let currentChunkSize = 0;\n        let currentChunkStart = 0;\n        const selfClient = this.client;\n        async function uploadChunk(lastUpload = false) {\n            if (chunksUploaded - 1 >= currentChunkStart / client.CHUNK_SIZE) {\n                return;\n            }\n            const start = currentChunkStart;\n            const end = currentChunkStart + currentChunkSize - 1;\n            if (!lastUpload || currentChunkStart !== 0) {\n                apiHeaders[\"content-range\"] = \"bytes \" + start + \"-\" + end + \"/\" + size;\n            }\n            if (id) {\n                apiHeaders[\"x-appwrite-id\"] = id;\n            }\n            payload[\"file\"] = {\n                type: \"file\",\n                file: currentChunk,\n                filename: file.filename,\n                size: currentChunkSize\n            };\n            response = await selfClient.call(\"post\", apiPath, apiHeaders, payload);\n            if (!id) {\n                id = response[\"$id\"];\n            }\n            if (onProgress !== null) {\n                onProgress({\n                    $id: response[\"$id\"],\n                    progress: Math.min((start + client.CHUNK_SIZE) * client.CHUNK_SIZE, size) / size * 100,\n                    sizeUploaded: end + 1,\n                    chunksTotal: response[\"chunksTotal\"],\n                    chunksUploaded: response[\"chunksUploaded\"]\n                });\n            }\n            currentChunkStart += client.CHUNK_SIZE;\n        }\n        return await new Promise((resolve, reject)=>{\n            const writeStream = new Stream.Writable();\n            writeStream._write = async (mainChunk, encoding, callback)=>{\n                try {\n                    // Segment incoming chunk into up to 5MB chunks\n                    const mainChunkSize = Buffer.byteLength(mainChunk);\n                    const chunksCount = Math.ceil(mainChunkSize / client.CHUNK_SIZE);\n                    const chunks = [];\n                    for(let i = 0; i < chunksCount; i++){\n                        const chunk = mainChunk.slice(i * client.CHUNK_SIZE, (i + 1) * client.CHUNK_SIZE);\n                        chunks.push(chunk);\n                    }\n                    for (const chunk of chunks){\n                        const chunkSize = Buffer.byteLength(chunk);\n                        if (chunkSize + currentChunkSize == client.CHUNK_SIZE) {\n                            // Upload chunk\n                            currentChunk = Buffer.concat([\n                                currentChunk,\n                                chunk\n                            ]);\n                            currentChunkSize = Buffer.byteLength(currentChunk);\n                            await uploadChunk();\n                            currentChunk = Buffer.from(\"\");\n                            currentChunkSize = 0;\n                        } else if (chunkSize + currentChunkSize > client.CHUNK_SIZE) {\n                            // Upload chunk, put rest into next chunk\n                            const bytesToUpload = client.CHUNK_SIZE - currentChunkSize;\n                            const newChunkSection = chunk.slice(0, bytesToUpload);\n                            currentChunk = Buffer.concat([\n                                currentChunk,\n                                newChunkSection\n                            ]);\n                            currentChunkSize = Buffer.byteLength(currentChunk);\n                            await uploadChunk();\n                            currentChunk = chunk.slice(bytesToUpload, undefined);\n                            currentChunkSize = chunkSize - bytesToUpload;\n                        } else {\n                            // Append into current chunk\n                            currentChunk = Buffer.concat([\n                                currentChunk,\n                                chunk\n                            ]);\n                            currentChunkSize = chunkSize + currentChunkSize;\n                        }\n                    }\n                    callback();\n                } catch (e) {\n                    callback(e);\n                }\n            };\n            writeStream.on(\"finish\", async ()=>{\n                if (currentChunkSize > 0) {\n                    try {\n                        await uploadChunk(true);\n                    } catch (e) {\n                        reject(e);\n                    }\n                }\n                resolve(response);\n            });\n            writeStream.on(\"error\", (err)=>{\n                reject(err);\n            });\n            file.stream.pipe(writeStream);\n        });\n    }\n    /**\n     * Get file\n     *\n     * Get a file by its unique ID. This endpoint response returns a JSON object\n     * with the file metadata.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getFile(bucketId, fileId) {\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update file\n     *\n     * Update a file by its unique ID. Only users with write permissions have\n     * access to update this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateFile(bucketId, fileId, name, permissions) {\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete File\n     *\n     * Delete a file by its unique ID. Only users with write permissions have\n     * access to delete this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteFile(bucketId, fileId) {\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get file for download\n     *\n     * Get a file content by its unique ID. The endpoint response return with a\n     * 'Content-Disposition: attachment' header that tells the browser to start\n     * downloading the file to user downloads directory.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getFileDownload(bucketId, fileId) {\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/download\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get file preview\n     *\n     * Get a file preview image. Currently, this method supports preview for image\n     * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\n     * and spreadsheets, will return the file icon image. You can also pass query\n     * string arguments for cutting and resizing your preview image. Preview is\n     * supported only for image files smaller than 10MB.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {number} width\n     * @param {number} height\n     * @param {string} gravity\n     * @param {number} quality\n     * @param {number} borderWidth\n     * @param {string} borderColor\n     * @param {number} borderRadius\n     * @param {number} opacity\n     * @param {number} rotation\n     * @param {string} background\n     * @param {string} output\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getFilePreview(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output) {\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/preview\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof gravity !== \"undefined\") {\n            payload[\"gravity\"] = gravity;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        if (typeof borderWidth !== \"undefined\") {\n            payload[\"borderWidth\"] = borderWidth;\n        }\n        if (typeof borderColor !== \"undefined\") {\n            payload[\"borderColor\"] = borderColor;\n        }\n        if (typeof borderRadius !== \"undefined\") {\n            payload[\"borderRadius\"] = borderRadius;\n        }\n        if (typeof opacity !== \"undefined\") {\n            payload[\"opacity\"] = opacity;\n        }\n        if (typeof rotation !== \"undefined\") {\n            payload[\"rotation\"] = rotation;\n        }\n        if (typeof background !== \"undefined\") {\n            payload[\"background\"] = background;\n        }\n        if (typeof output !== \"undefined\") {\n            payload[\"output\"] = output;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n    /**\n     * Get file for view\n     *\n     * Get a file content by its unique ID. This endpoint is similar to the\n     * download method but returns with no  'Content-Disposition: attachment'\n     * header.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getFileView(bucketId, fileId) {\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/view\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        let payload = {};\n        if (typeof bucketId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload, \"arraybuffer\");\n    }\n}\nmodule.exports = Storage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/teams.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/teams.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Teams extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * List teams\n     *\n     * Get a list of all the teams in which the current user is a member. You can\n     * use the parameters to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async list(queries, search) {\n        const apiPath = \"/teams\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create team\n     *\n     * Create a new team. The user who creates the team will automatically be\n     * assigned as the owner of the team. Only the users with the owner role can\n     * invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async create(teamId, name, roles) {\n        const apiPath = \"/teams\";\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof teamId !== \"undefined\") {\n            payload[\"teamId\"] = teamId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof roles !== \"undefined\") {\n            payload[\"roles\"] = roles;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get team\n     *\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async get(teamId) {\n        const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update name\n     *\n     * Update the team's name by its unique ID.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateName(teamId, name) {\n        const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete team\n     *\n     * Delete a team using its ID. Only team members with the owner role can\n     * delete the team.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async delete(teamId) {\n        const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List team memberships\n     *\n     * Use this endpoint to list a team's members using the team's ID. All team\n     * members have read access to this endpoint.\n     *\n     * @param {string} teamId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listMemberships(teamId, queries, search) {\n        const apiPath = \"/teams/{teamId}/memberships\".replace(\"{teamId}\", teamId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create team membership\n     *\n     * Invite a new member to join your team. Provide an ID for existing users, or\n     * invite unregistered users using an email or phone number. If initiated from\n     * a Client SDK, Appwrite will send an email or sms with a link to join the\n     * team to the invited user, and an account will be created for them if one\n     * doesn't exist. If initiated from a Server SDK, the new member will be added\n     * automatically to the team.\n     * \n     * You only need to provide one of a user ID, email, or phone number. Appwrite\n     * will prioritize accepting the user ID > email > phone number if you provide\n     * more than one of these parameters.\n     * \n     * Use the `url` parameter to redirect the user from the invitation email to\n     * your app. After the user is redirected, use the [Update Team Membership\n     * Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus)\n     * endpoint to allow the user to accept the invitation to the team. \n     * \n     * Please note that to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * Appwrite will accept the only redirect URLs under the domains you have\n     * added as a platform on the Appwrite Console.\n     * \n     *\n     * @param {string} teamId\n     * @param {string[]} roles\n     * @param {string} email\n     * @param {string} userId\n     * @param {string} phone\n     * @param {string} url\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createMembership(teamId, roles, email, userId, phone, url, name) {\n        const apiPath = \"/teams/{teamId}/memberships\".replace(\"{teamId}\", teamId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof roles === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof phone !== \"undefined\") {\n            payload[\"phone\"] = phone;\n        }\n        if (typeof roles !== \"undefined\") {\n            payload[\"roles\"] = roles;\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get team membership\n     *\n     * Get a team member by the membership unique id. All team members have read\n     * access for this resource.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getMembership(teamId, membershipId) {\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update membership\n     *\n     * Modify the roles of a team member. Only team members with the owner role\n     * have access to this endpoint. Learn more about [roles and\n     * permissions](https://appwrite.io/docs/permissions).\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateMembership(teamId, membershipId, roles) {\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof roles === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n        if (typeof roles !== \"undefined\") {\n            payload[\"roles\"] = roles;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete team membership\n     *\n     * This endpoint allows a user to leave a team or for a team owner to delete\n     * the membership of any other team member. You can also use this endpoint to\n     * delete a user membership even if it is not accepted.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteMembership(teamId, membershipId) {\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update team membership status\n     *\n     * Use this endpoint to allow a user to accept an invitation to join a team\n     * after being redirected back to your app from the invitation email received\n     * by the user.\n     * \n     * If the request is successful, a session for the user is automatically\n     * created.\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateMembershipStatus(teamId, membershipId, userId, secret) {\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}/status\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get team preferences\n     *\n     * Get the team's shared preferences by its unique ID. If a preference doesn't\n     * need to be shared by all team members, prefer storing them in [user\n     * preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getPrefs(teamId) {\n        const apiPath = \"/teams/{teamId}/prefs\".replace(\"{teamId}\", teamId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update preferences\n     *\n     * Update the team's preferences by its unique ID. The object you pass is\n     * stored as is and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} teamId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePrefs(teamId, prefs) {\n        const apiPath = \"/teams/{teamId}/prefs\".replace(\"{teamId}\", teamId);\n        let payload = {};\n        if (typeof teamId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof prefs === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        if (typeof prefs !== \"undefined\") {\n            payload[\"prefs\"] = prefs;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Teams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/teams.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/users.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/users.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass Users extends Service {\n    constructor(client){\n        super(client);\n    }\n    /**\n     * List users\n     *\n     * Get a list of all the project's users. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async list(queries, search) {\n        const apiPath = \"/users\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user\n     *\n     * Create a new user.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} phone\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async create(userId, email, phone, password, name) {\n        const apiPath = \"/users\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof phone !== \"undefined\") {\n            payload[\"phone\"] = phone;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user with Argon2 password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createArgon2User(userId, email, password, name) {\n        const apiPath = \"/users/argon2\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user with bcrypt password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createBcryptUser(userId, email, password, name) {\n        const apiPath = \"/users/bcrypt\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List Identities\n     *\n     * Get identities for all users.\n     *\n     * @param {string} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listIdentities(queries, search) {\n        const apiPath = \"/users/identities\";\n        let payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete Identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteIdentity(identityId) {\n        const apiPath = \"/users/identities/{identityId}\".replace(\"{identityId}\", identityId);\n        let payload = {};\n        if (typeof identityId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user with MD5 password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createMD5User(userId, email, password, name) {\n        const apiPath = \"/users/md5\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user with PHPass password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createPHPassUser(userId, email, password, name) {\n        const apiPath = \"/users/phpass\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user with Scrypt password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {number} passwordCpu\n     * @param {number} passwordMemory\n     * @param {number} passwordParallel\n     * @param {number} passwordLength\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createScryptUser(userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength, name) {\n        const apiPath = \"/users/scrypt\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordCpu === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordCpu\"');\n        }\n        if (typeof passwordMemory === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordMemory\"');\n        }\n        if (typeof passwordParallel === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordParallel\"');\n        }\n        if (typeof passwordLength === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordLength\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof passwordSalt !== \"undefined\") {\n            payload[\"passwordSalt\"] = passwordSalt;\n        }\n        if (typeof passwordCpu !== \"undefined\") {\n            payload[\"passwordCpu\"] = passwordCpu;\n        }\n        if (typeof passwordMemory !== \"undefined\") {\n            payload[\"passwordMemory\"] = passwordMemory;\n        }\n        if (typeof passwordParallel !== \"undefined\") {\n            payload[\"passwordParallel\"] = passwordParallel;\n        }\n        if (typeof passwordLength !== \"undefined\") {\n            payload[\"passwordLength\"] = passwordLength;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user with Scrypt modified password\n     *\n     * Create a new user. Password provided must be hashed with the [Scrypt\n     * Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc)\n     * algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {string} passwordSaltSeparator\n     * @param {string} passwordSignerKey\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createScryptModifiedUser(userId, email, password, passwordSalt, passwordSaltSeparator, passwordSignerKey, name) {\n        const apiPath = \"/users/scrypt-modified\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordSaltSeparator === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordSaltSeparator\"');\n        }\n        if (typeof passwordSignerKey === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"passwordSignerKey\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof passwordSalt !== \"undefined\") {\n            payload[\"passwordSalt\"] = passwordSalt;\n        }\n        if (typeof passwordSaltSeparator !== \"undefined\") {\n            payload[\"passwordSaltSeparator\"] = passwordSaltSeparator;\n        }\n        if (typeof passwordSignerKey !== \"undefined\") {\n            payload[\"passwordSignerKey\"] = passwordSignerKey;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Create user with SHA password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use\n     * the [POST /users](https://appwrite.io/docs/server/users#usersCreate)\n     * endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordVersion\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async createSHAUser(userId, email, password, passwordVersion, name) {\n        const apiPath = \"/users/sha\";\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof passwordVersion !== \"undefined\") {\n            payload[\"passwordVersion\"] = passwordVersion;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"post\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get user\n     *\n     * Get a user by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async get(userId) {\n        const apiPath = \"/users/{userId}\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete user\n     *\n     * Delete a user by its unique ID, thereby releasing it's ID. Since ID is\n     * released and can be reused, all user-related resources like documents or\n     * storage files should be deleted before user deletion. If you want to keep\n     * ID reserved, use the\n     * [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus)\n     * endpoint instead.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async delete(userId) {\n        const apiPath = \"/users/{userId}\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update email\n     *\n     * Update the user email by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateEmail(userId, email) {\n        const apiPath = \"/users/{userId}/email\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update user labels\n     *\n     * Update the user labels by its unique ID. \n     * \n     * Labels can be used to grant access to resources. While teams are a way for\n     * user's to share access to a resource, labels can be defined by the\n     * developer to grant access without an invitation. See the [Permissions\n     * docs](https://appwrite.io/docs/permissions) for more info.\n     *\n     * @param {string} userId\n     * @param {string[]} labels\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateLabels(userId, labels) {\n        const apiPath = \"/users/{userId}/labels\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof labels === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"labels\"');\n        }\n        if (typeof labels !== \"undefined\") {\n            payload[\"labels\"] = labels;\n        }\n        return await this.client.call(\"put\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List user logs\n     *\n     * Get the user activity logs list by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listLogs(userId, queries) {\n        const apiPath = \"/users/{userId}/logs\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List user memberships\n     *\n     * Get the user membership list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listMemberships(userId) {\n        const apiPath = \"/users/{userId}/memberships\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update name\n     *\n     * Update the user name by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateName(userId, name) {\n        const apiPath = \"/users/{userId}/name\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update password\n     *\n     * Update the user password by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePassword(userId, password) {\n        const apiPath = \"/users/{userId}/password\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update phone\n     *\n     * Update the user phone by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} number\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePhone(userId, number) {\n        const apiPath = \"/users/{userId}/phone\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof number === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"number\"');\n        }\n        if (typeof number !== \"undefined\") {\n            payload[\"number\"] = number;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Get user preferences\n     *\n     * Get the user preferences by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async getPrefs(userId) {\n        const apiPath = \"/users/{userId}/prefs\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update user preferences\n     *\n     * Update the user preferences by its unique ID. The object you pass is stored\n     * as is, and replaces any previous value. The maximum allowed prefs size is\n     * 64kB and throws error if exceeded.\n     *\n     * @param {string} userId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePrefs(userId, prefs) {\n        const apiPath = \"/users/{userId}/prefs\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof prefs === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        if (typeof prefs !== \"undefined\") {\n            payload[\"prefs\"] = prefs;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * List user sessions\n     *\n     * Get the user sessions list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async listSessions(userId) {\n        const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        return await this.client.call(\"get\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete user sessions\n     *\n     * Delete all user's sessions by using the user's unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteSessions(userId) {\n        const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Delete user session\n     *\n     * Delete a user sessions by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async deleteSession(userId, sessionId) {\n        const apiPath = \"/users/{userId}/sessions/{sessionId}\".replace(\"{userId}\", userId).replace(\"{sessionId}\", sessionId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof sessionId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        return await this.client.call(\"delete\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update user status\n     *\n     * Update the user status by its unique ID. Use this endpoint as an\n     * alternative to deleting a user if you want to keep user's ID reserved.\n     *\n     * @param {string} userId\n     * @param {boolean} status\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateStatus(userId, status) {\n        const apiPath = \"/users/{userId}/status\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof status === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"status\"');\n        }\n        if (typeof status !== \"undefined\") {\n            payload[\"status\"] = status;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update email verification\n     *\n     * Update the user email verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} emailVerification\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updateEmailVerification(userId, emailVerification) {\n        const apiPath = \"/users/{userId}/verification\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof emailVerification === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"emailVerification\"');\n        }\n        if (typeof emailVerification !== \"undefined\") {\n            payload[\"emailVerification\"] = emailVerification;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n    /**\n     * Update phone verification\n     *\n     * Update the user phone verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} phoneVerification\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */ async updatePhoneVerification(userId, phoneVerification) {\n        const apiPath = \"/users/{userId}/verification/phone\".replace(\"{userId}\", userId);\n        let payload = {};\n        if (typeof userId === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof phoneVerification === \"undefined\") {\n            throw new AppwriteException('Missing required parameter: \"phoneVerification\"');\n        }\n        if (typeof phoneVerification !== \"undefined\") {\n            payload[\"phoneVerification\"] = phoneVerification;\n        }\n        return await this.client.call(\"patch\", apiPath, {\n            \"content-type\": \"application/json\"\n        }, payload);\n    }\n}\nmodule.exports = Users;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/users.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/node_modules/form-data/lib/form_data.js":
/*!****************************************************************************!*\
  !*** ./node_modules/node-appwrite/node_modules/form-data/lib/form_data.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var CombinedStream = __webpack_require__(/*! combined-stream */ \"(rsc)/./node_modules/combined-stream/lib/combined_stream.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar parseUrl = (__webpack_require__(/*! url */ \"url\").parse);\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar mime = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\nvar asynckit = __webpack_require__(/*! asynckit */ \"(rsc)/./node_modules/asynckit/index.js\");\nvar populate = __webpack_require__(/*! ./populate.js */ \"(rsc)/./node_modules/node-appwrite/node_modules/form-data/lib/populate.js\");\n// Public API\nmodule.exports = FormData;\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */ function FormData(options) {\n    if (!(this instanceof FormData)) {\n        return new FormData(options);\n    }\n    this._overheadLength = 0;\n    this._valueLength = 0;\n    this._valuesToMeasure = [];\n    CombinedStream.call(this);\n    options = options || {};\n    for(var option in options){\n        this[option] = options[option];\n    }\n}\nFormData.LINE_BREAK = \"\\r\\n\";\nFormData.DEFAULT_CONTENT_TYPE = \"application/octet-stream\";\nFormData.prototype.append = function(field, value, options) {\n    options = options || {};\n    // allow filename as single option\n    if (typeof options == \"string\") {\n        options = {\n            filename: options\n        };\n    }\n    var append = CombinedStream.prototype.append.bind(this);\n    // all that streamy business can't handle numbers\n    if (typeof value == \"number\") {\n        value = \"\" + value;\n    }\n    // https://github.com/felixge/node-form-data/issues/38\n    if (util.isArray(value)) {\n        // Please convert your array into string\n        // the way web server expects it\n        this._error(new Error(\"Arrays are not supported.\"));\n        return;\n    }\n    var header = this._multiPartHeader(field, value, options);\n    var footer = this._multiPartFooter();\n    append(header);\n    append(value);\n    append(footer);\n    // pass along options.knownLength\n    this._trackLength(header, value, options);\n};\nFormData.prototype._trackLength = function(header, value, options) {\n    var valueLength = 0;\n    // used w/ getLengthSync(), when length is known.\n    // e.g. for streaming directly from a remote server,\n    // w/ a known file a size, and not wanting to wait for\n    // incoming file to finish to get its size.\n    if (options.knownLength != null) {\n        valueLength += +options.knownLength;\n    } else if (Buffer.isBuffer(value)) {\n        valueLength = value.length;\n    } else if (typeof value === \"string\") {\n        valueLength = Buffer.byteLength(value);\n    }\n    this._valueLength += valueLength;\n    // @check why add CRLF? does this account for custom/multiple CRLFs?\n    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;\n    // empty or either doesn't have path or not an http response or not a stream\n    if (!value || !value.path && !(value.readable && value.hasOwnProperty(\"httpVersion\")) && !(value instanceof Stream)) {\n        return;\n    }\n    // no need to bother with the length\n    if (!options.knownLength) {\n        this._valuesToMeasure.push(value);\n    }\n};\nFormData.prototype._lengthRetriever = function(value, callback) {\n    if (value.hasOwnProperty(\"fd\")) {\n        // take read range into a account\n        // `end` = Infinity –> read file till the end\n        //\n        // TODO: Looks like there is bug in Node fs.createReadStream\n        // it doesn't respect `end` options without `start` options\n        // Fix it when node fixes it.\n        // https://github.com/joyent/node/issues/7819\n        if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n            // when end specified\n            // no need to calculate range\n            // inclusive, starts with 0\n            callback(null, value.end + 1 - (value.start ? value.start : 0));\n        // not that fast snoopy\n        } else {\n            // still need to fetch file size from fs\n            fs.stat(value.path, function(err, stat) {\n                var fileSize;\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                // update final size based on the range options\n                fileSize = stat.size - (value.start ? value.start : 0);\n                callback(null, fileSize);\n            });\n        }\n    // or http response\n    } else if (value.hasOwnProperty(\"httpVersion\")) {\n        callback(null, +value.headers[\"content-length\"]);\n    // or request stream http://github.com/mikeal/request\n    } else if (value.hasOwnProperty(\"httpModule\")) {\n        // wait till response come back\n        value.on(\"response\", function(response) {\n            value.pause();\n            callback(null, +response.headers[\"content-length\"]);\n        });\n        value.resume();\n    // something else\n    } else {\n        callback(\"Unknown stream\");\n    }\n};\nFormData.prototype._multiPartHeader = function(field, value, options) {\n    // custom header specified (as string)?\n    // it becomes responsible for boundary\n    // (e.g. to handle extra CRLFs on .NET servers)\n    if (typeof options.header == \"string\") {\n        return options.header;\n    }\n    var contentDisposition = this._getContentDisposition(value, options);\n    var contentType = this._getContentType(value, options);\n    var contents = \"\";\n    var headers = {\n        // add custom disposition as third element or keep it two elements if not\n        \"Content-Disposition\": [\n            \"form-data\",\n            'name=\"' + field + '\"'\n        ].concat(contentDisposition || []),\n        // if no content type. allow it to be empty array\n        \"Content-Type\": [].concat(contentType || [])\n    };\n    // allow custom headers.\n    if (typeof options.header == \"object\") {\n        populate(headers, options.header);\n    }\n    var header;\n    for(var prop in headers){\n        if (!headers.hasOwnProperty(prop)) continue;\n        header = headers[prop];\n        // skip nullish headers.\n        if (header == null) {\n            continue;\n        }\n        // convert all headers to arrays.\n        if (!Array.isArray(header)) {\n            header = [\n                header\n            ];\n        }\n        // add non-empty headers.\n        if (header.length) {\n            contents += prop + \": \" + header.join(\"; \") + FormData.LINE_BREAK;\n        }\n    }\n    return \"--\" + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\nFormData.prototype._getContentDisposition = function(value, options) {\n    var filename, contentDisposition;\n    if (typeof options.filepath === \"string\") {\n        // custom filepath for relative paths\n        filename = path.normalize(options.filepath).replace(/\\\\/g, \"/\");\n    } else if (options.filename || value.name || value.path) {\n        // custom filename take precedence\n        // formidable and the browser add a name property\n        // fs- and request- streams have path property\n        filename = path.basename(options.filename || value.name || value.path);\n    } else if (value.readable && value.hasOwnProperty(\"httpVersion\")) {\n        // or try http response\n        filename = path.basename(value.client._httpMessage.path || \"\");\n    }\n    if (filename) {\n        contentDisposition = 'filename=\"' + filename + '\"';\n    }\n    return contentDisposition;\n};\nFormData.prototype._getContentType = function(value, options) {\n    // use custom content-type above all\n    var contentType = options.contentType;\n    // or try `name` from formidable, browser\n    if (!contentType && value.name) {\n        contentType = mime.lookup(value.name);\n    }\n    // or try `path` from fs-, request- streams\n    if (!contentType && value.path) {\n        contentType = mime.lookup(value.path);\n    }\n    // or if it's http-reponse\n    if (!contentType && value.readable && value.hasOwnProperty(\"httpVersion\")) {\n        contentType = value.headers[\"content-type\"];\n    }\n    // or guess it from the filepath or filename\n    if (!contentType && (options.filepath || options.filename)) {\n        contentType = mime.lookup(options.filepath || options.filename);\n    }\n    // fallback to the default content type if `value` is not simple value\n    if (!contentType && typeof value == \"object\") {\n        contentType = FormData.DEFAULT_CONTENT_TYPE;\n    }\n    return contentType;\n};\nFormData.prototype._multiPartFooter = function() {\n    return (function(next) {\n        var footer = FormData.LINE_BREAK;\n        var lastPart = this._streams.length === 0;\n        if (lastPart) {\n            footer += this._lastBoundary();\n        }\n        next(footer);\n    }).bind(this);\n};\nFormData.prototype._lastBoundary = function() {\n    return \"--\" + this.getBoundary() + \"--\" + FormData.LINE_BREAK;\n};\nFormData.prototype.getHeaders = function(userHeaders) {\n    var header;\n    var formHeaders = {\n        \"content-type\": \"multipart/form-data; boundary=\" + this.getBoundary()\n    };\n    for(header in userHeaders){\n        if (userHeaders.hasOwnProperty(header)) {\n            formHeaders[header.toLowerCase()] = userHeaders[header];\n        }\n    }\n    return formHeaders;\n};\nFormData.prototype.setBoundary = function(boundary) {\n    this._boundary = boundary;\n};\nFormData.prototype.getBoundary = function() {\n    if (!this._boundary) {\n        this._generateBoundary();\n    }\n    return this._boundary;\n};\nFormData.prototype.getBuffer = function() {\n    var dataBuffer = new Buffer.alloc(0);\n    var boundary = this.getBoundary();\n    // Create the form content. Add Line breaks to the end of data.\n    for(var i = 0, len = this._streams.length; i < len; i++){\n        if (typeof this._streams[i] !== \"function\") {\n            // Add content to the buffer.\n            if (Buffer.isBuffer(this._streams[i])) {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    this._streams[i]\n                ]);\n            } else {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    Buffer.from(this._streams[i])\n                ]);\n            }\n            // Add break after content.\n            if (typeof this._streams[i] !== \"string\" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    Buffer.from(FormData.LINE_BREAK)\n                ]);\n            }\n        }\n    }\n    // Add the footer and return the Buffer object.\n    return Buffer.concat([\n        dataBuffer,\n        Buffer.from(this._lastBoundary())\n    ]);\n};\nFormData.prototype._generateBoundary = function() {\n    // This generates a 50 character boundary similar to those used by Firefox.\n    // They are optimized for boyer-moore parsing.\n    var boundary = \"--------------------------\";\n    for(var i = 0; i < 24; i++){\n        boundary += Math.floor(Math.random() * 10).toString(16);\n    }\n    this._boundary = boundary;\n};\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n    var knownLength = this._overheadLength + this._valueLength;\n    // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n    // so it basically checks if there is any value added to the form\n    if (this._streams.length) {\n        knownLength += this._lastBoundary().length;\n    }\n    // https://github.com/form-data/form-data/issues/40\n    if (!this.hasKnownLength()) {\n        // Some async length retrievers are present\n        // therefore synchronous length calculation is false.\n        // Please use getLength(callback) to get proper length\n        this._error(new Error(\"Cannot calculate proper length in synchronous way.\"));\n    }\n    return knownLength;\n};\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n    var hasKnownLength = true;\n    if (this._valuesToMeasure.length) {\n        hasKnownLength = false;\n    }\n    return hasKnownLength;\n};\nFormData.prototype.getLength = function(cb) {\n    var knownLength = this._overheadLength + this._valueLength;\n    if (this._streams.length) {\n        knownLength += this._lastBoundary().length;\n    }\n    if (!this._valuesToMeasure.length) {\n        process.nextTick(cb.bind(this, null, knownLength));\n        return;\n    }\n    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n        if (err) {\n            cb(err);\n            return;\n        }\n        values.forEach(function(length) {\n            knownLength += length;\n        });\n        cb(null, knownLength);\n    });\n};\nFormData.prototype.submit = function(params, cb) {\n    var request, options, defaults = {\n        method: \"post\"\n    };\n    // parse provided url if it's string\n    // or treat it as options object\n    if (typeof params == \"string\") {\n        params = parseUrl(params);\n        options = populate({\n            port: params.port,\n            path: params.pathname,\n            host: params.hostname,\n            protocol: params.protocol\n        }, defaults);\n    // use custom params\n    } else {\n        options = populate(params, defaults);\n        // if no port provided use default one\n        if (!options.port) {\n            options.port = options.protocol == \"https:\" ? 443 : 80;\n        }\n    }\n    // put that good code in getHeaders to some use\n    options.headers = this.getHeaders(params.headers);\n    // https if specified, fallback to http in any other case\n    if (options.protocol == \"https:\") {\n        request = https.request(options);\n    } else {\n        request = http.request(options);\n    }\n    // get content length and fire away\n    this.getLength((function(err, length) {\n        if (err && err !== \"Unknown stream\") {\n            this._error(err);\n            return;\n        }\n        // add content length\n        if (length) {\n            request.setHeader(\"Content-Length\", length);\n        }\n        this.pipe(request);\n        if (cb) {\n            var onResponse;\n            var callback = function(error, responce) {\n                request.removeListener(\"error\", callback);\n                request.removeListener(\"response\", onResponse);\n                return cb.call(this, error, responce);\n            };\n            onResponse = callback.bind(this, null);\n            request.on(\"error\", callback);\n            request.on(\"response\", onResponse);\n        }\n    }).bind(this));\n    return request;\n};\nFormData.prototype._error = function(err) {\n    if (!this.error) {\n        this.error = err;\n        this.pause();\n        this.emit(\"error\", err);\n    }\n};\nFormData.prototype.toString = function() {\n    return \"[object FormData]\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/node_modules/form-data/lib/form_data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/node_modules/form-data/lib/populate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/node-appwrite/node_modules/form-data/lib/populate.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("// populates missing values\nmodule.exports = function(dst, src) {\n    Object.keys(src).forEach(function(prop) {\n        dst[prop] = dst[prop] || src[prop];\n    });\n    return dst;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrbmVzdC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzPzM4MmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcG9wdWxhdGVzIG1pc3NpbmcgdmFsdWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRzdCwgc3JjKSB7XG5cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApXG4gIHtcbiAgICBkc3RbcHJvcF0gPSBkc3RbcHJvcF0gfHwgc3JjW3Byb3BdO1xuICB9KTtcblxuICByZXR1cm4gZHN0O1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZHN0Iiwic3JjIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJwcm9wIl0sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkI7QUFDM0JBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxHQUFHLEVBQUVDLEdBQUc7SUFFaENDLE9BQU9DLElBQUksQ0FBQ0YsS0FBS0csT0FBTyxDQUFDLFNBQVNDLElBQUk7UUFFcENMLEdBQUcsQ0FBQ0ssS0FBSyxHQUFHTCxHQUFHLENBQUNLLEtBQUssSUFBSUosR0FBRyxDQUFDSSxLQUFLO0lBQ3BDO0lBRUEsT0FBT0w7QUFDVCIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/node_modules/form-data/lib/populate.js\n");

/***/ })

};
;